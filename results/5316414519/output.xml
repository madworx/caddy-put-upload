<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1 (Python 3.9.2 on linux)" generated="20230619 22:03:37.315" rpa="false" schemaversion="4">
<suite id="s1" name="E2E Tests" source="/w/e2e_tests">
<suite id="s1-s1" name="001 Source Code" source="/w/e2e_tests/001_source_code.robot">
<test id="s1-s1-t1" name="Golang" line="8">
<kw name="Expect Successful Execution" library="keywords">
<arg>make lint-go</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:03:37.404" level="INFO">Starting process:
make lint-go</msg>
<msg timestamp="20230619 22:03:37.407" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:00.132" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:00.133" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:03:37.404" endtime="20230619 22:05:00.133"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:05:00.134" endtime="20230619 22:05:00.134"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:05:00.133" endtime="20230619 22:05:00.134"/>
</branch>
<status status="PASS" starttime="20230619 22:05:00.133" endtime="20230619 22:05:00.134"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:00.135" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:00.134" endtime="20230619 22:05:00.135"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:05:00.135" endtime="20230619 22:05:00.135"/>
</return>
<status status="PASS" starttime="20230619 22:03:37.403" endtime="20230619 22:05:00.136"/>
</kw>
<doc>Lint Golang code</doc>
<status status="PASS" starttime="20230619 22:03:37.402" endtime="20230619 22:05:00.136"/>
</test>
<test id="s1-s1-t2" name="Robot Framework" line="12">
<kw name="Expect Successful Execution" library="keywords">
<arg>make lint-robot</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:00.138" level="INFO">Starting process:
make lint-robot</msg>
<msg timestamp="20230619 22:05:00.141" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:00.754" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:00.754" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:00.138" endtime="20230619 22:05:00.754"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:05:00.756" endtime="20230619 22:05:00.756"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:05:00.755" endtime="20230619 22:05:00.756"/>
</branch>
<status status="PASS" starttime="20230619 22:05:00.755" endtime="20230619 22:05:00.756"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:00.757" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:00.756" endtime="20230619 22:05:00.757"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:05:00.757" endtime="20230619 22:05:00.757"/>
</return>
<status status="PASS" starttime="20230619 22:05:00.138" endtime="20230619 22:05:00.757"/>
</kw>
<doc>Lint Robot Framework code</doc>
<status status="PASS" starttime="20230619 22:05:00.136" endtime="20230619 22:05:00.757"/>
</test>
<test id="s1-s1-t3" name="Python" line="16">
<kw name="Expect Successful Execution" library="keywords">
<arg>make lint-python</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:00.760" level="INFO">Starting process:
make lint-python</msg>
<msg timestamp="20230619 22:05:00.763" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:00.802" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:00.803" level="INFO">${result} = &lt;result object with rc 2&gt;</msg>
<status status="PASS" starttime="20230619 22:05:00.760" endtime="20230619 22:05:00.803"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20230619 22:05:00.805" level="INFO">make[1]: *** No rule to make target '.pythonreqs.done', needed by '.lint-python.done'.  Stop.</msg>
<msg timestamp="20230619 22:05:00.805" level="INFO">make[1]: Entering directory '/w'
make[1]: Leaving directory '/w'</msg>
<status status="PASS" starttime="20230619 22:05:00.804" endtime="20230619 22:05:00.805"/>
</kw>
<status status="PASS" starttime="20230619 22:05:00.803" endtime="20230619 22:05:00.805"/>
</branch>
<status status="PASS" starttime="20230619 22:05:00.803" endtime="20230619 22:05:00.805"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:00.806" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20230619 22:05:00.806" level="FAIL">2 != 0</msg>
<status status="FAIL" starttime="20230619 22:05:00.806" endtime="20230619 22:05:00.806"/>
</kw>
<return>
<value>${result}</value>
<status status="NOT RUN" starttime="20230619 22:05:00.807" endtime="20230619 22:05:00.807"/>
</return>
<status status="FAIL" starttime="20230619 22:05:00.759" endtime="20230619 22:05:00.807"/>
</kw>
<doc>Lint Python code</doc>
<status status="FAIL" starttime="20230619 22:05:00.758" endtime="20230619 22:05:00.807">2 != 0</status>
</test>
<doc>This test suite performs code linting for different languages.</doc>
<status status="FAIL" starttime="20230619 22:03:37.333" endtime="20230619 22:05:00.808"/>
</suite>
<suite id="s1-s2" name="002 Unit Tests" source="/w/e2e_tests/002_unit_tests.robot">
<kw name="Suite Setup" library="keywords" type="SETUP">
<doc>Ensure there is a directory for coverage files</doc>
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20230619 22:05:00.814" level="INFO" html="true">Created directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 22:05:00.814" endtime="20230619 22:05:00.814"/>
</kw>
<status status="PASS" starttime="20230619 22:05:00.814" endtime="20230619 22:05:00.814"/>
</kw>
<test id="s1-s2-t1" name="Unit tests" line="12">
<kw name="Get Coverage Filename From Suite Source" library="keywords">
<var>${cov_path}</var>
<var>${cov_filename}</var>
<doc>Splits `/w/e2e_tests/002_unit_tests.robot` into path and filename. Constructs a
path to the coverage file in `/w/e2e_tests/results`. Returns the coverage full file
path and the coverage filename separately.</doc>
<kw name="Split Path" library="OperatingSystem">
<var>${path}</var>
<var>${suite_filename}</var>
<arg>${SUITE SOURCE}</arg>
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<msg timestamp="20230619 22:05:00.816" level="INFO">${path} = /w/e2e_tests</msg>
<msg timestamp="20230619 22:05:00.816" level="INFO">${suite_filename} = 002_unit_tests.robot</msg>
<status status="PASS" starttime="20230619 22:05:00.815" endtime="20230619 22:05:00.816"/>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<var>${suite_name}</var>
<var>${ext}</var>
<arg>${suite_filename}</arg>
<doc>Splits the extension from the given path.</doc>
<msg timestamp="20230619 22:05:00.816" level="INFO">${suite_name} = 002_unit_tests</msg>
<msg timestamp="20230619 22:05:00.816" level="INFO">${ext} = robot</msg>
<status status="PASS" starttime="20230619 22:05:00.816" endtime="20230619 22:05:00.816"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${cov_path}</var>
<arg>${OUTPUT DIR}</arg>
<arg>${suite_name}.coverage</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20230619 22:05:00.816" level="INFO">${cov_path} = /w/e2e_tests/results/002_unit_tests.coverage</msg>
<status status="PASS" starttime="20230619 22:05:00.816" endtime="20230619 22:05:00.817"/>
</kw>
<return>
<value>${cov_path}</value>
<value>${suite_name}.coverage</value>
<status status="PASS" starttime="20230619 22:05:00.817" endtime="20230619 22:05:00.817"/>
</return>
<msg timestamp="20230619 22:05:00.817" level="INFO">${cov_path} = /w/e2e_tests/results/002_unit_tests.coverage</msg>
<msg timestamp="20230619 22:05:00.817" level="INFO">${cov_filename} = 002_unit_tests.coverage</msg>
<status status="PASS" starttime="20230619 22:05:00.815" endtime="20230619 22:05:00.817"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>go test ./... -v -coverprofile\=${cov_path} -covermode\=set</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:00.817" level="INFO">Starting process:
go test ./... -v -coverprofile=/w/e2e_tests/results/002_unit_tests.coverage -covermode=set</msg>
<msg timestamp="20230619 22:05:00.820" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:13.937" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:13.938" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:00.817" endtime="20230619 22:05:13.938"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>${result.stdout}</arg>
<arg>${result.stderr}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20230619 22:05:13.939" level="INFO">=== RUN   TestServeHTTP
--- PASS: TestServeHTTP (0.00s)
=== RUN   TestParseCaddyfile
--- PASS: TestParseCaddyfile (0.00s)
PASS
	github.com/madworx/caddy-put-upload	coverage: 73.3% of statements
ok  	github.com/madworx/caddy-put-upload	0.016s	coverage: 73.3% of statements
?   	github.com/madworx/caddy-put-upload/cmd/caddy	[no test files]
?   	github.com/madworx/caddy-put-upload/cmd/gocovmerge	[no test files]
?   	github.com/madworx/caddy-put-upload/e2e_tests/resources	[no test files]</msg>
<msg timestamp="20230619 22:05:13.940" level="INFO"/>
<status status="PASS" starttime="20230619 22:05:13.938" endtime="20230619 22:05:13.940"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:13.940" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:13.940" endtime="20230619 22:05:13.941"/>
</kw>
<doc>Execute golang unit tests</doc>
<status status="PASS" starttime="20230619 22:05:00.815" endtime="20230619 22:05:13.941"/>
</test>
<test id="s1-s2-t2" name="Failing unit tests should be detected" line="20">
<kw name="Copy File" library="OperatingSystem">
<arg>e2e_tests/resources/test_fail.go</arg>
<arg>fail_test.go</arg>
<doc>Copies the source file into the destination.</doc>
<msg timestamp="20230619 22:05:13.943" level="INFO" html="true">Copied file from '&lt;a href="file:///w/e2e_tests/resources/test_fail.go"&gt;/w/e2e_tests/resources/test_fail.go&lt;/a&gt;' to '&lt;a href="file:///w/fail_test.go"&gt;/w/fail_test.go&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 22:05:13.942" endtime="20230619 22:05:13.943"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>go test ./... -v</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:13.943" level="INFO">Starting process:
go test ./... -v</msg>
<msg timestamp="20230619 22:05:13.948" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:15.824" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:15.825" level="INFO">${result} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" starttime="20230619 22:05:13.943" endtime="20230619 22:05:15.825"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>${result.stdout}</arg>
<arg>${result.stderr}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20230619 22:05:15.827" level="INFO">?   	github.com/madworx/caddy-put-upload/cmd/caddy	[no test files]
=== RUN   TestFailure
--- FAIL: TestFailure (0.00s)
=== RUN   TestServeHTTP
--- PASS: TestServeHTTP (0.00s)
=== RUN   TestParseCaddyfile
--- PASS: TestParseCaddyfile (0.00s)
FAIL
FAIL	github.com/madworx/caddy-put-upload	0.017s
?   	github.com/madworx/caddy-put-upload/cmd/gocovmerge	[no test files]
?   	github.com/madworx/caddy-put-upload/e2e_tests/resources	[no test files]
FAIL</msg>
<msg timestamp="20230619 22:05:15.827" level="INFO"/>
<status status="PASS" starttime="20230619 22:05:15.825" endtime="20230619 22:05:15.827"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>1</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:15.828" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:15.827" endtime="20230619 22:05:15.828"/>
</kw>
<kw name="Remove File" library="OperatingSystem" type="TEARDOWN">
<arg>fail_test.go</arg>
<doc>Removes a file with the given path.</doc>
<msg timestamp="20230619 22:05:15.829" level="INFO" html="true">Removed file '&lt;a href="file:///w/fail_test.go"&gt;/w/fail_test.go&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 22:05:15.829" endtime="20230619 22:05:15.829"/>
</kw>
<doc>Ensure that we notice if unit tests start to fail</doc>
<status status="PASS" starttime="20230619 22:05:13.941" endtime="20230619 22:05:15.829"/>
</test>
<kw name="Suite Teardown" library="keywords" type="TEARDOWN">
<doc>Generate coverage report and remove coverage directory</doc>
<kw name="Generate Coverage Report" library="keywords">
<doc>Generate coverage report from generated files</doc>
<kw name="Get Coverage Filename From Suite Source" library="keywords">
<var>${cov_path}</var>
<var>${cov_filename}</var>
<doc>Splits `/w/e2e_tests/002_unit_tests.robot` into path and filename. Constructs a
path to the coverage file in `/w/e2e_tests/results`. Returns the coverage full file
path and the coverage filename separately.</doc>
<kw name="Split Path" library="OperatingSystem">
<var>${path}</var>
<var>${suite_filename}</var>
<arg>${SUITE SOURCE}</arg>
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<msg timestamp="20230619 22:05:15.832" level="INFO">${path} = /w/e2e_tests</msg>
<msg timestamp="20230619 22:05:15.832" level="INFO">${suite_filename} = 002_unit_tests.robot</msg>
<status status="PASS" starttime="20230619 22:05:15.831" endtime="20230619 22:05:15.832"/>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<var>${suite_name}</var>
<var>${ext}</var>
<arg>${suite_filename}</arg>
<doc>Splits the extension from the given path.</doc>
<msg timestamp="20230619 22:05:15.832" level="INFO">${suite_name} = 002_unit_tests</msg>
<msg timestamp="20230619 22:05:15.832" level="INFO">${ext} = robot</msg>
<status status="PASS" starttime="20230619 22:05:15.832" endtime="20230619 22:05:15.832"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${cov_path}</var>
<arg>${OUTPUT DIR}</arg>
<arg>${suite_name}.coverage</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20230619 22:05:15.832" level="INFO">${cov_path} = /w/e2e_tests/results/002_unit_tests.coverage</msg>
<status status="PASS" starttime="20230619 22:05:15.832" endtime="20230619 22:05:15.832"/>
</kw>
<return>
<value>${cov_path}</value>
<value>${suite_name}.coverage</value>
<status status="PASS" starttime="20230619 22:05:15.832" endtime="20230619 22:05:15.833"/>
</return>
<msg timestamp="20230619 22:05:15.833" level="INFO">${cov_path} = /w/e2e_tests/results/002_unit_tests.coverage</msg>
<msg timestamp="20230619 22:05:15.833" level="INFO">${cov_filename} = 002_unit_tests.coverage</msg>
<status status="PASS" starttime="20230619 22:05:15.831" endtime="20230619 22:05:15.833"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${dir_exists}</var>
<arg>Directory Should Exist</arg>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Directory Should Exist" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Fails unless the given path points to an existing directory.</doc>
<msg timestamp="20230619 22:05:15.833" level="INFO" html="true">Directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230619 22:05:15.833" endtime="20230619 22:05:15.833"/>
</kw>
<msg timestamp="20230619 22:05:15.833" level="INFO">${dir_exists} = True</msg>
<status status="PASS" starttime="20230619 22:05:15.833" endtime="20230619 22:05:15.833"/>
</kw>
<if>
<branch type="IF" condition="${dir_exists}">
<kw name="List Files In Directory" library="OperatingSystem">
<var>${dir_contents}</var>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Wrapper for `List Directory` that returns only files.</doc>
<msg timestamp="20230619 22:05:15.834" level="INFO" html="true">Listing contents of directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<msg timestamp="20230619 22:05:15.834" level="INFO">0 files:
</msg>
<msg timestamp="20230619 22:05:15.834" level="INFO">${dir_contents} = []</msg>
<status status="PASS" starttime="20230619 22:05:15.834" endtime="20230619 22:05:15.834"/>
</kw>
<status status="PASS" starttime="20230619 22:05:15.834" endtime="20230619 22:05:15.834"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${dir_contents}</var>
<arg>${None}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230619 22:05:15.834" endtime="20230619 22:05:15.834"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:05:15.834" endtime="20230619 22:05:15.834"/>
</branch>
<status status="PASS" starttime="20230619 22:05:15.834" endtime="20230619 22:05:15.834"/>
</if>
<if>
<branch type="IF" condition="${dir_contents}">
<kw name="Convert Coverage Fragments" library="keywords">
<arg>${cov_path}</arg>
<doc>Convert coverage fragments (from a go run/build -cover execution) into
a single file</doc>
<status status="NOT RUN" starttime="20230619 22:05:15.835" endtime="20230619 22:05:15.835"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:05:15.835" endtime="20230619 22:05:15.835"/>
</branch>
<status status="PASS" starttime="20230619 22:05:15.835" endtime="20230619 22:05:15.835"/>
</if>
<kw name="Expect Successful Execution" library="keywords">
<arg>go tool cover -html\=${cov_path} -o\=${cov_path}.html</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:15.837" level="INFO">Starting process:
go tool cover -html=/w/e2e_tests/results/002_unit_tests.coverage -o=/w/e2e_tests/results/002_unit_tests.coverage.html</msg>
<msg timestamp="20230619 22:05:15.839" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:16.173" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:16.173" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:15.836" endtime="20230619 22:05:16.173"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:05:16.175" endtime="20230619 22:05:16.175"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:05:16.173" endtime="20230619 22:05:16.175"/>
</branch>
<status status="PASS" starttime="20230619 22:05:16.173" endtime="20230619 22:05:16.175"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:16.176" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:16.175" endtime="20230619 22:05:16.176"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:05:16.176" endtime="20230619 22:05:16.176"/>
</return>
<status status="PASS" starttime="20230619 22:05:15.836" endtime="20230619 22:05:16.176"/>
</kw>
<kw name="Expect Successful Execution" library="keywords">
<var>${result}</var>
<arg>go tool cover -func\=${cov_path}</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:16.178" level="INFO">Starting process:
go tool cover -func=/w/e2e_tests/results/002_unit_tests.coverage</msg>
<msg timestamp="20230619 22:05:16.181" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:16.522" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:16.522" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:16.178" endtime="20230619 22:05:16.522"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:05:16.524" endtime="20230619 22:05:16.524"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:05:16.523" endtime="20230619 22:05:16.524"/>
</branch>
<status status="PASS" starttime="20230619 22:05:16.522" endtime="20230619 22:05:16.524"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:16.525" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:16.524" endtime="20230619 22:05:16.525"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:05:16.525" endtime="20230619 22:05:16.525"/>
</return>
<msg timestamp="20230619 22:05:16.525" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:16.177" endtime="20230619 22:05:16.525"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${percent}</var>
<arg>${result.stdout}</arg>
<arg>total:.*?([0-9.]+%)$</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20230619 22:05:16.526" level="INFO">${percent} = ['73.3%']</msg>
<status status="PASS" starttime="20230619 22:05:16.525" endtime="20230619 22:05:16.526"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>Code coverage</arg>
<arg>${percent[0]} [${cov_filename}.html|HTML Report] | [${cov_filename}|Coverage file]</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20230619 22:05:16.527" level="INFO">Set suite metadata 'Code coverage' to value '73.3% [002_unit_tests.coverage.html|HTML Report] | [002_unit_tests.coverage|Coverage file]'.</msg>
<status status="PASS" starttime="20230619 22:05:16.526" endtime="20230619 22:05:16.527"/>
</kw>
<status status="PASS" starttime="20230619 22:05:15.831" endtime="20230619 22:05:16.527"/>
</kw>
<kw name="Remove Directory" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<arg>recursive=True</arg>
<doc>Removes the directory pointed to by the given ``path``.</doc>
<msg timestamp="20230619 22:05:16.528" level="INFO" html="true">Removed directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 22:05:16.527" endtime="20230619 22:05:16.528"/>
</kw>
<status status="PASS" starttime="20230619 22:05:15.831" endtime="20230619 22:05:16.528"/>
</kw>
<doc>Run native unit tests for the golang code and serves to aggregate
all test results into one report, also generating a coverage report.</doc>
<meta name="Code coverage">73.3% [002_unit_tests.coverage.html|HTML Report] | [002_unit_tests.coverage|Coverage file]</meta>
<status status="PASS" starttime="20230619 22:05:00.809" endtime="20230619 22:05:16.528"/>
</suite>
<suite id="s1-s3" name="003 Configuration" source="/w/e2e_tests/003_configuration.robot">
<kw name="Suite Setup" library="keywords" type="SETUP">
<doc>Ensure there is a directory for coverage files</doc>
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20230619 22:05:16.535" level="INFO" html="true">Created directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 22:05:16.535" endtime="20230619 22:05:16.535"/>
</kw>
<status status="PASS" starttime="20230619 22:05:16.534" endtime="20230619 22:05:16.535"/>
</kw>
<test id="s1-s3-t1" name="Example configuration: basic authentication" line="14">
<kw name="Validate Configuration" library="keywords">
<arg>examples/Caddyfile.basic-auth</arg>
<arg>0</arg>
<doc>Validate if configuration behaves as expected</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${CADDY_VALIDATE} ${file_name}</arg>
<arg>shell=True</arg>
<arg>env:GOCOVERDIR=${OUTPUT DIR}/go-coverage</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:16.537" level="INFO">Starting process:
go run -cover cmd/caddy/main.go validate --config examples/Caddyfile.basic-auth</msg>
<msg timestamp="20230619 22:05:16.540" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:18.585" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:18.586" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:16.536" endtime="20230619 22:05:18.586"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:18.587" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:18.586" endtime="20230619 22:05:18.587"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${expected_response}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230619 22:05:18.587" endtime="20230619 22:05:18.588"/>
</kw>
<status status="PASS" starttime="20230619 22:05:16.536" endtime="20230619 22:05:18.588"/>
</kw>
<doc>Test that example configuration with HTTP basic authentication is accepted</doc>
<status status="PASS" starttime="20230619 22:05:16.535" endtime="20230619 22:05:18.588"/>
</test>
<test id="s1-s3-t2" name="Example configuration: no authentication" line="18">
<kw name="Validate Configuration" library="keywords">
<arg>examples/Caddyfile.no-authentication</arg>
<arg>0</arg>
<doc>Validate if configuration behaves as expected</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${CADDY_VALIDATE} ${file_name}</arg>
<arg>shell=True</arg>
<arg>env:GOCOVERDIR=${OUTPUT DIR}/go-coverage</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:18.591" level="INFO">Starting process:
go run -cover cmd/caddy/main.go validate --config examples/Caddyfile.no-authentication</msg>
<msg timestamp="20230619 22:05:18.594" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:20.582" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:20.583" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:18.591" endtime="20230619 22:05:20.583"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:20.584" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:20.583" endtime="20230619 22:05:20.584"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${expected_response}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230619 22:05:20.585" endtime="20230619 22:05:20.585"/>
</kw>
<status status="PASS" starttime="20230619 22:05:18.590" endtime="20230619 22:05:20.585"/>
</kw>
<doc>Test that example configuration without authentication is accepted</doc>
<status status="PASS" starttime="20230619 22:05:18.589" endtime="20230619 22:05:20.585"/>
</test>
<test id="s1-s3-t3" name="Invalid configuration: empty" line="22">
<kw name="Validate Configuration" library="keywords">
<arg>e2e_tests/resources/Caddyfile.invalid-no-arg</arg>
<arg>1</arg>
<arg>Wrong argument count or unexpected line ending after 'http_put_file'</arg>
<doc>Validate if configuration behaves as expected</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${CADDY_VALIDATE} ${file_name}</arg>
<arg>shell=True</arg>
<arg>env:GOCOVERDIR=${OUTPUT DIR}/go-coverage</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:20.587" level="INFO">Starting process:
go run -cover cmd/caddy/main.go validate --config e2e_tests/resources/Caddyfile.invalid-no-arg</msg>
<msg timestamp="20230619 22:05:20.590" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:22.536" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:22.537" level="INFO">${result} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" starttime="20230619 22:05:20.587" endtime="20230619 22:05:22.537"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:22.539" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:22.537" endtime="20230619 22:05:22.539"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${expected_response}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230619 22:05:22.539" endtime="20230619 22:05:22.539"/>
</kw>
<status status="PASS" starttime="20230619 22:05:20.587" endtime="20230619 22:05:22.540"/>
</kw>
<doc>Test that an invalid configuration is rejected (no arguments)</doc>
<status status="PASS" starttime="20230619 22:05:20.586" endtime="20230619 22:05:22.540"/>
</test>
<test id="s1-s3-t4" name="Invalid configuration: structure" line="28">
<kw name="Validate Configuration" library="keywords">
<arg>e2e_tests/resources/Caddyfile.invalid-nested-args</arg>
<arg>1</arg>
<arg>Wrong argument count or unexpected line ending after 'http_put_file'</arg>
<doc>Validate if configuration behaves as expected</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${CADDY_VALIDATE} ${file_name}</arg>
<arg>shell=True</arg>
<arg>env:GOCOVERDIR=${OUTPUT DIR}/go-coverage</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:22.542" level="INFO">Starting process:
go run -cover cmd/caddy/main.go validate --config e2e_tests/resources/Caddyfile.invalid-nested-args</msg>
<msg timestamp="20230619 22:05:22.544" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:24.503" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:24.504" level="INFO">${result} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" starttime="20230619 22:05:22.541" endtime="20230619 22:05:24.504"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:24.505" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:24.504" endtime="20230619 22:05:24.505"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${expected_response}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230619 22:05:24.505" endtime="20230619 22:05:24.506"/>
</kw>
<status status="PASS" starttime="20230619 22:05:22.541" endtime="20230619 22:05:24.506"/>
</kw>
<doc>Test that an invalid configuration is rejected (nested argument)</doc>
<status status="PASS" starttime="20230619 22:05:22.540" endtime="20230619 22:05:24.506"/>
</test>
<kw name="Suite Teardown" library="keywords" type="TEARDOWN">
<doc>Generate coverage report and remove coverage directory</doc>
<kw name="Generate Coverage Report" library="keywords">
<doc>Generate coverage report from generated files</doc>
<kw name="Get Coverage Filename From Suite Source" library="keywords">
<var>${cov_path}</var>
<var>${cov_filename}</var>
<doc>Splits `/w/e2e_tests/003_configuration.robot` into path and filename. Constructs a
path to the coverage file in `/w/e2e_tests/results`. Returns the coverage full file
path and the coverage filename separately.</doc>
<kw name="Split Path" library="OperatingSystem">
<var>${path}</var>
<var>${suite_filename}</var>
<arg>${SUITE SOURCE}</arg>
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<msg timestamp="20230619 22:05:24.508" level="INFO">${path} = /w/e2e_tests</msg>
<msg timestamp="20230619 22:05:24.508" level="INFO">${suite_filename} = 003_configuration.robot</msg>
<status status="PASS" starttime="20230619 22:05:24.508" endtime="20230619 22:05:24.509"/>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<var>${suite_name}</var>
<var>${ext}</var>
<arg>${suite_filename}</arg>
<doc>Splits the extension from the given path.</doc>
<msg timestamp="20230619 22:05:24.509" level="INFO">${suite_name} = 003_configuration</msg>
<msg timestamp="20230619 22:05:24.509" level="INFO">${ext} = robot</msg>
<status status="PASS" starttime="20230619 22:05:24.509" endtime="20230619 22:05:24.509"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${cov_path}</var>
<arg>${OUTPUT DIR}</arg>
<arg>${suite_name}.coverage</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20230619 22:05:24.509" level="INFO">${cov_path} = /w/e2e_tests/results/003_configuration.coverage</msg>
<status status="PASS" starttime="20230619 22:05:24.509" endtime="20230619 22:05:24.509"/>
</kw>
<return>
<value>${cov_path}</value>
<value>${suite_name}.coverage</value>
<status status="PASS" starttime="20230619 22:05:24.509" endtime="20230619 22:05:24.509"/>
</return>
<msg timestamp="20230619 22:05:24.510" level="INFO">${cov_path} = /w/e2e_tests/results/003_configuration.coverage</msg>
<msg timestamp="20230619 22:05:24.510" level="INFO">${cov_filename} = 003_configuration.coverage</msg>
<status status="PASS" starttime="20230619 22:05:24.508" endtime="20230619 22:05:24.510"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${dir_exists}</var>
<arg>Directory Should Exist</arg>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Directory Should Exist" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Fails unless the given path points to an existing directory.</doc>
<msg timestamp="20230619 22:05:24.510" level="INFO" html="true">Directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230619 22:05:24.510" endtime="20230619 22:05:24.510"/>
</kw>
<msg timestamp="20230619 22:05:24.510" level="INFO">${dir_exists} = True</msg>
<status status="PASS" starttime="20230619 22:05:24.510" endtime="20230619 22:05:24.510"/>
</kw>
<if>
<branch type="IF" condition="${dir_exists}">
<kw name="List Files In Directory" library="OperatingSystem">
<var>${dir_contents}</var>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Wrapper for `List Directory` that returns only files.</doc>
<msg timestamp="20230619 22:05:24.511" level="INFO" html="true">Listing contents of directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<msg timestamp="20230619 22:05:24.511" level="INFO">5 files:
covcounters.6b007adb3d230b7f717346764648bf5a.7852.1687212318573330966
covcounters.6b007adb3d230b7f717346764648bf5a.7905.1687212320570284556
covcounters.6b007adb3d230b7f717346764648bf5a.7956.1687212322525374182
covcounters.6b007adb3d230b7f717346764648bf5a.8010.1687212324491738706
covmeta.6b007adb3d230b7f717346764648bf5a</msg>
<msg timestamp="20230619 22:05:24.511" level="INFO">${dir_contents} = ['covcounters.6b007adb3d230b7f717346764648bf5a.7852.1687212318573330966', 'covcounters.6b007adb3d230b7f717346764648bf5a.7905.1687212320570284556', 'covcounters.6b007adb3d230b7f717346764648bf5a.7956.16...</msg>
<status status="PASS" starttime="20230619 22:05:24.511" endtime="20230619 22:05:24.511"/>
</kw>
<status status="PASS" starttime="20230619 22:05:24.511" endtime="20230619 22:05:24.511"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${dir_contents}</var>
<arg>${None}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230619 22:05:24.511" endtime="20230619 22:05:24.511"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:05:24.511" endtime="20230619 22:05:24.511"/>
</branch>
<status status="PASS" starttime="20230619 22:05:24.510" endtime="20230619 22:05:24.511"/>
</if>
<if>
<branch type="IF" condition="${dir_contents}">
<kw name="Convert Coverage Fragments" library="keywords">
<arg>${cov_path}</arg>
<doc>Convert coverage fragments (from a go run/build -cover execution) into
a single file</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>go tool covdata textfmt -i\=${OUTPUT DIR}/go-coverage -o\=${cov_path}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:24.512" level="INFO">Starting process:
go tool covdata textfmt -i=/w/e2e_tests/results/go-coverage -o=/w/e2e_tests/results/003_configuration.coverage</msg>
<msg timestamp="20230619 22:05:24.515" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:24.523" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:24.523" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:24.512" endtime="20230619 22:05:24.523"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:24.524" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:24.523" endtime="20230619 22:05:24.524"/>
</kw>
<status status="PASS" starttime="20230619 22:05:24.512" endtime="20230619 22:05:24.525"/>
</kw>
<status status="PASS" starttime="20230619 22:05:24.511" endtime="20230619 22:05:24.525"/>
</branch>
<status status="PASS" starttime="20230619 22:05:24.511" endtime="20230619 22:05:24.525"/>
</if>
<kw name="Expect Successful Execution" library="keywords">
<arg>go tool cover -html\=${cov_path} -o\=${cov_path}.html</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:24.527" level="INFO">Starting process:
go tool cover -html=/w/e2e_tests/results/003_configuration.coverage -o=/w/e2e_tests/results/003_configuration.coverage.html</msg>
<msg timestamp="20230619 22:05:24.529" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:24.850" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:24.851" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:24.526" endtime="20230619 22:05:24.851"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:05:24.852" endtime="20230619 22:05:24.853"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:05:24.851" endtime="20230619 22:05:24.853"/>
</branch>
<status status="PASS" starttime="20230619 22:05:24.851" endtime="20230619 22:05:24.853"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:24.854" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:24.853" endtime="20230619 22:05:24.854"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:05:24.854" endtime="20230619 22:05:24.854"/>
</return>
<status status="PASS" starttime="20230619 22:05:24.526" endtime="20230619 22:05:24.854"/>
</kw>
<kw name="Expect Successful Execution" library="keywords">
<var>${result}</var>
<arg>go tool cover -func\=${cov_path}</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:24.856" level="INFO">Starting process:
go tool cover -func=/w/e2e_tests/results/003_configuration.coverage</msg>
<msg timestamp="20230619 22:05:24.859" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:25.180" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:25.181" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:24.856" endtime="20230619 22:05:25.181"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:05:25.182" endtime="20230619 22:05:25.182"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:05:25.181" endtime="20230619 22:05:25.183"/>
</branch>
<status status="PASS" starttime="20230619 22:05:25.181" endtime="20230619 22:05:25.183"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:25.183" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:25.183" endtime="20230619 22:05:25.183"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:05:25.184" endtime="20230619 22:05:25.184"/>
</return>
<msg timestamp="20230619 22:05:25.184" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:24.855" endtime="20230619 22:05:25.184"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${percent}</var>
<arg>${result.stdout}</arg>
<arg>total:.*?([0-9.]+%)$</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20230619 22:05:25.185" level="INFO">${percent} = ['37.0%']</msg>
<status status="PASS" starttime="20230619 22:05:25.184" endtime="20230619 22:05:25.185"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>Code coverage</arg>
<arg>${percent[0]} [${cov_filename}.html|HTML Report] | [${cov_filename}|Coverage file]</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20230619 22:05:25.185" level="INFO">Set suite metadata 'Code coverage' to value '37.0% [003_configuration.coverage.html|HTML Report] | [003_configuration.coverage|Coverage file]'.</msg>
<status status="PASS" starttime="20230619 22:05:25.185" endtime="20230619 22:05:25.185"/>
</kw>
<status status="PASS" starttime="20230619 22:05:24.508" endtime="20230619 22:05:25.186"/>
</kw>
<kw name="Remove Directory" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<arg>recursive=True</arg>
<doc>Removes the directory pointed to by the given ``path``.</doc>
<msg timestamp="20230619 22:05:25.186" level="INFO" html="true">Removed directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 22:05:25.186" endtime="20230619 22:05:25.186"/>
</kw>
<status status="PASS" starttime="20230619 22:05:24.507" endtime="20230619 22:05:25.186"/>
</kw>
<doc>A series of test cases designed to verify the behavior of various
configurations, ranging from valid to invalid scenarios.
It utilizes keywords and resources defined in the
'resources/keywords.robot' file for test execution.</doc>
<meta name="Code coverage">37.0% [003_configuration.coverage.html|HTML Report] | [003_configuration.coverage|Coverage file]</meta>
<status status="PASS" starttime="20230619 22:05:16.530" endtime="20230619 22:05:25.186"/>
</suite>
<suite id="s1-s4" name="004 Requests" source="/w/e2e_tests/004_requests.robot">
<kw name="Suite Setup With Caddy" library="keywords" type="SETUP">
<doc>Run regular suite setup, start Caddy and wait until it is available</doc>
<kw name="Suite Setup" library="keywords">
<doc>Ensure there is a directory for coverage files</doc>
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20230619 22:05:25.196" level="INFO" html="true">Created directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 22:05:25.195" endtime="20230619 22:05:25.196"/>
</kw>
<status status="PASS" starttime="20230619 22:05:25.195" endtime="20230619 22:05:25.196"/>
</kw>
<kw name="Expect Caddy Not Ready" library="keywords">
<doc>Check that Caddy is not ready to accept connections</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>GET</arg>
<arg>${BASE_URL}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 22:05:25.200" level="FAIL">ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fbe33563190&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))</msg>
<status status="FAIL" starttime="20230619 22:05:25.196" endtime="20230619 22:05:25.223"/>
</kw>
<msg timestamp="20230619 22:05:25.223" level="INFO">${result} = False</msg>
<status status="PASS" starttime="20230619 22:05:25.196" endtime="20230619 22:05:25.223"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>${False}</arg>
<arg>msg=Caddy seems to be running already, which is unexpected in this test context.</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20230619 22:05:25.223" endtime="20230619 22:05:25.224"/>
</kw>
<status status="PASS" starttime="20230619 22:05:25.196" endtime="20230619 22:05:25.224"/>
</kw>
<kw name="Start Process" library="Process">
<arg>${CADDY_RUN} examples/Caddyfile.basic-auth</arg>
<arg>shell=True</arg>
<arg>env:GOCOVERDIR=${OUTPUT DIR}/go-coverage</arg>
<arg>alias=caddy</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20230619 22:05:25.224" level="INFO">Starting process:
go run -cover cmd/caddy/main.go run --config examples/Caddyfile.basic-auth</msg>
<status status="PASS" starttime="20230619 22:05:25.224" endtime="20230619 22:05:25.228"/>
</kw>
<kw name="Wait Until Caddy Is Ready" library="keywords">
<doc>Return only when Caddy is ready to accept connections</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>30s</arg>
<arg>0.5s</arg>
<arg>GET</arg>
<arg>${BASE_URL}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 22:05:25.231" level="FAIL">ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fbe335144c0&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))</msg>
<status status="FAIL" starttime="20230619 22:05:25.229" endtime="20230619 22:05:25.232"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 22:05:25.734" level="FAIL">ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fbe334a2040&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))</msg>
<status status="FAIL" starttime="20230619 22:05:25.732" endtime="20230619 22:05:25.735"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 22:05:26.238" level="FAIL">ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fbe33514850&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))</msg>
<status status="FAIL" starttime="20230619 22:05:26.235" endtime="20230619 22:05:26.238"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 22:05:26.741" level="FAIL">ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fbe3356c5b0&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))</msg>
<status status="FAIL" starttime="20230619 22:05:26.739" endtime="20230619 22:05:26.741"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 22:05:28.375" level="INFO">GET Request : url=http://Bob:hiccup@localhost:8080/ 
 path_url=/ 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Basic Qm9iOmhpY2N1cA=='} 
 body=None 
 </msg>
<msg timestamp="20230619 22:05:28.375" level="INFO">GET Response : url=http://Bob:hiccup@localhost:8080/ 
 status=200, reason=OK 
 headers={'Server': 'Caddy', 'Date': 'Mon, 19 Jun 2023 22:05:28 GMT', 'Content-Length': '0'} 
 body=None 
 </msg>
<status status="PASS" starttime="20230619 22:05:27.242" endtime="20230619 22:05:28.375"/>
</kw>
<status status="PASS" starttime="20230619 22:05:25.229" endtime="20230619 22:05:28.375"/>
</kw>
<status status="PASS" starttime="20230619 22:05:25.228" endtime="20230619 22:05:28.375"/>
</kw>
<status status="PASS" starttime="20230619 22:05:25.195" endtime="20230619 22:05:28.376"/>
</kw>
<test id="s1-s4-t1" name="Test simple upload" line="12">
<kw name="Upload File" library="keywords">
<arg>go.mod</arg>
<doc>Test uploading a single file. The go.mod argument should
be the absolute path to the file.</doc>
<kw name="Get Binary File" library="OperatingSystem">
<var>${file_data}</var>
<arg>${file_path}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20230619 22:05:28.378" level="INFO" html="true">Getting file '&lt;a href="file:///w/go.mod"&gt;/w/go.mod&lt;/a&gt;'.</msg>
<msg timestamp="20230619 22:05:28.378" level="INFO">${file_data} = module github.com/madworx/caddy-put-upload

go 1.19

require (
	github.com/caddyserver/caddy/v2 v2.6.4
	github.com/stretchr/testify v1.8.1
)

require (
	github.com/kr/text v0.2.0 // indirect
	github.c...</msg>
<status status="PASS" starttime="20230619 22:05:28.377" endtime="20230619 22:05:28.378"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${file_name}</var>
<arg>/upload/test.txt</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230619 22:05:28.378" level="INFO">${file_name} = /upload/test.txt</msg>
<status status="PASS" starttime="20230619 22:05:28.378" endtime="20230619 22:05:28.378"/>
</kw>
<kw name="PUT" library="RequestsLibrary">
<var>${response}</var>
<arg>${url}${file_name}</arg>
<arg>data=${file_data}</arg>
<arg>expected_status=${expected_status}</arg>
<doc>Sends a PUT request.</doc>
<msg timestamp="20230619 22:05:28.382" level="INFO">PUT Request : url=http://Bob:hiccup@localhost:8080//upload/test.txt 
 path_url=//upload/test.txt 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '6839', 'Authorization': 'Basic Qm9iOmhpY2N1cA=='} 
 body=b'module github.com/madworx/caddy-put-upload\n\ngo 1.19\n\nrequire (\n\tgithub.com/caddyserver/caddy/v2 v2.6.4\n\tgithub.com/stretchr/testify v1.8.1\n)\n\nrequire (\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/rogpeppe/go-internal v1.10.0 // indirect\n)\n\nrequire (\n\tfilippo.io/edwards25519 v1.0.0 // indirect\n\tgithub.com/AndreasBriese/bbloom v0.0.0-20190825152654-46b345b51c96 // indirect\n\tgithub.com/BurntSushi/toml v1.2.1 // indirect\n\tgithub.com/Masterminds/goutils v1.1.1 // indirect\n\tgithub.com/Masterminds/semver/v3 v3.2.0 // indirect\n\tgithub.com/Masterminds/sprig/v3 v3.2.3 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.0 // indirect\n\tgithub.com/alecthomas/chroma/v2 v2.5.0 // indirect\n\tgithub.com/antlr/antlr4/runtime/Go/antlr v1.4.10 // indirect\n\tgithub.com/aryann/difflib v0.0.0-20210328193216-ff5ff6dc229b // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/caddyserver/certmagic v0.17.2 // indirect\n\tgithub.com/cenkalti/backoff/v4 v4.1.2 // indirect\n\tgithub.com/cespare/xxhash v1.1.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.1.2 // indirect\n\tgithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.2 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/dgraph-io/badger v1.6.2 // indirect\n\tgithub.com/dgraph-io/badger/v2 v2.2007.4 // indirect\n\tgithub.com/dgraph-io/ristretto v0.1.0 // indirect\n\tgithub.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13 // indirect\n\tgithub.com/dlclark/regexp2 v1.7.0 // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.3 // indirect\n\tgithub.com/fxamacker/cbor/v2 v2.4.0 // indirect\n\tgithub.com/go-chi/chi v4.1.2+incompatible // indirect\n\tgithub.com/go-kit/kit v0.10.0 // indirect\n\tgithub.com/go-logfmt/logfmt v0.5.1 // indirect\n\tgithub.com/go-logr/logr v1.2.3 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-sql-driver/mysql v1.6.0 // indirect\n\tgithub.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0 // indirect\n\tgithub.com/golang/glog v1.0.0 // indirect\n\tgithub.com/golang/mock v1.6.0 // indirect\n\tgithub.com/golang/protobuf v1.5.2 // indirect\n\tgithub.com/golang/snappy v0.0.4 // indirect\n\tgithub.com/google/cel-go v0.13.0 // indirect\n\tgithub.com/google/pprof v0.0.0-20210407192527-94a9f03dee38 // indirect\n\tgithub.com/google/uuid v1.3.0 // indirect\n\tgithub.com/grpc-ecosystem/grpc-gateway v1.16.0 // indirect\n\tgithub.com/huandu/xstrings v1.3.3 // indirect\n\tgithub.com/imdario/mergo v0.3.12 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.0.1 // indirect\n\tgithub.com/jackc/chunkreader/v2 v2.0.1 // indirect\n\tgithub.com/jackc/pgconn v1.13.0 // indirect\n\tgithub.com/jackc/pgio v1.0.0 // indirect\n\tgithub.com/jackc/pgpassfile v1.0.0 // indirect\n\tgithub.com/jackc/pgproto3/v2 v2.3.1 // indirect\n\tgithub.com/jackc/pgservicefile v0.0.0-20200714003250-2b9c44734f2b // indirect\n\tgithub.com/jackc/pgtype v1.12.0 // indirect\n\tgithub.com/jackc/pgx/v4 v4.17.2 // indirect\n\tgithub.com/klauspost/compress v1.15.15 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.3 // indirect\n\tgithub.com/libdns/libdns v0.2.1 // indirect\n\tgithub.com/manifoldco/promptui v0.9.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.8 // indirect\n\tgithub.com/mattn/go-isatty v0.0.13 // indirect\n\tgithub.com/matttproud/golang_protobuf_extensions v1.0.1 // indirect\n\tgithub.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d // indirect\n\tgithub.com/mholt/acmez v1.1.0 // indirect\n\tgithub.com/micromdm/scep/v2 v2.1.0 // indirect\n\tgithub.com/miekg/dns v1.1.50 // indirect\n\tgithub.com/mitchellh/copystructure v1.2.0 // indirect\n\tgithub.com/mitchellh/go-ps v1.0.0 // indirect\n\tgithub.com/mitchellh/reflectwalk v1.0.2 // indirect\n\tgithub.com/onsi/ginkgo/v2 v2.2.0 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/prometheus/client_golang v1.14.0 // indirect\n\tgithub.com/prometheus/client_model v0.3.0 // indirect\n\tgithub.com/prometheus/common v0.37.0 // indirect\n\tgithub.com/prometheus/procfs v0.8.0 // indirect\n\tgithub.com/quic-go/qpack v0.4.0 // indirect\n\tgithub.com/quic-go/qtls-go1-18 v0.2.0 // indirect\n\tgithub.com/quic-go/qtls-go1-19 v0.2.0 // indirect\n\tgithub.com/quic-go/qtls-go1-20 v0.1.0 // indirect\n\tgithub.com/quic-go/quic-go v0.32.0 // indirect\n\tgithub.com/rs/xid v1.4.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/shopspring/decimal v1.2.0 // indirect\n\tgithub.com/shurcooL/sanitized_anchor_name v1.0.0 // indirect\n\tgithub.com/sirupsen/logrus v1.9.0 // indirect\n\tgithub.com/slackhq/nebula v1.6.1 // indirect\n\tgithub.com/smallstep/certificates v0.23.2 // indirect\n\tgithub.com/smallstep/nosql v0.5.0 // indirect\n\tgithub.com/smallstep/truststore v0.12.1 // indirect\n\tgithub.com/spf13/cast v1.4.1 // indirect\n\tgithub.com/spf13/cobra v1.6.1 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/stoewer/go-strcase v1.2.0 // indirect\n\tgithub.com/tailscale/tscert v0.0.0-20230124224810-c6dc1f4049b2 // indirect\n\tgithub.com/urfave/cli v1.22.12 // indirect\n\tgithub.com/x448/float16 v0.8.4 // indirect\n\tgithub.com/yuin/goldmark v1.5.4 // indirect\n\tgithub.com/yuin/goldmark-highlighting/v2 v2.0.0-20220924101305-151362477c87 // indirect\n\tgo.etcd.io/bbolt v1.3.6 // indirect\n\tgo.mozilla.org/pkcs7 v0.0.0-20210826202110-33d05740a352 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.39.0 // indirect\n\tgo.opentelemetry.io/otel v1.13.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/internal/retry v1.4.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.4.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.4.0 // indirect\n\tgo.opentelemetry.io/otel/metric v0.36.0 // indirect\n\tgo.opentelemetry.io/otel/sdk v1.13.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.13.0 // indirect\n\tgo.opentelemetry.io/proto/otlp v0.12.0 // indirect\n\tgo.step.sm/cli-utils v0.7.5 // indirect\n\tgo.step.sm/crypto v0.23.2 // indirect\n\tgo.step.sm/linkedca v0.19.0 // indirect\n\tgo.uber.org/atomic v1.9.0 // indirect\n\tgo.uber.org/multierr v1.6.0 // indirect\n\tgo.uber.org/zap v1.24.0 // indirect\n\tgolang.org/x/crypto v0.5.0 // indirect\n\tgolang.org/x/exp v0.0.0-20221205204356-47842c84f3db // indirect\n\tgolang.org/x/mod v0.10.0 // indirect\n\tgolang.org/x/net v0.10.0 // indirect\n\tgolang.org/x/sync v0.2.0 // indirect\n\tgolang.org/x/sys v0.8.0 // indirect\n\tgolang.org/x/term v0.8.0 // indirect\n\tgolang.org/x/text v0.9.0 // indirect\n\tgolang.org/x/tools v0.9.3\n\tgoogle.golang.org/genproto v0.0.0-20230202175211-008b39050e57 // indirect\n\tgoogle.golang.org/grpc v1.52.3 // indirect\n\tgoogle.golang.org/protobuf v1.28.1 // indirect\n\tgopkg.in/natefinch/lumberjack.v2 v2.2.1 // indirect\n\tgopkg.in/square/go-jose.v2 v2.6.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\thowett.net/plist v1.0.0 // indirect\n)\n' 
 </msg>
<msg timestamp="20230619 22:05:28.382" level="INFO">PUT Response : url=http://Bob:hiccup@localhost:8080//upload/test.txt 
 status=201, reason=Created 
 headers={'Server': 'Caddy', 'Date': 'Mon, 19 Jun 2023 22:05:28 GMT', 'Content-Length': '44', 'Content-Type': 'text/plain; charset=utf-8'} 
 body=File /upload/test.txt created successfully.
 
 </msg>
<msg timestamp="20230619 22:05:28.383" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230619 22:05:28.378" endtime="20230619 22:05:28.383"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230619 22:05:28.383" level="INFO">&lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230619 22:05:28.383" endtime="20230619 22:05:28.383"/>
</kw>
<if>
<branch type="IF" condition="${text_expected} == True">
<kw name="Should Match" library="BuiltIn">
<arg>${response.text}</arg>
<arg>File ${file_name} created successfully.\n</arg>
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<status status="PASS" starttime="20230619 22:05:28.383" endtime="20230619 22:05:28.384"/>
</kw>
<status status="PASS" starttime="20230619 22:05:28.383" endtime="20230619 22:05:28.384"/>
</branch>
<status status="PASS" starttime="20230619 22:05:28.383" endtime="20230619 22:05:28.384"/>
</if>
<status status="PASS" starttime="20230619 22:05:28.377" endtime="20230619 22:05:28.384"/>
</kw>
<doc>Simple uploads of a file should work</doc>
<status status="PASS" starttime="20230619 22:05:28.376" endtime="20230619 22:05:28.385"/>
</test>
<test id="s1-s4-t2" name="Unauthenticated upload should fail" line="16">
<kw name="Upload File" library="keywords">
<arg>go.mod</arg>
<arg>http://localhost:8080/</arg>
<arg>expected_status=401</arg>
<arg>text_expected=False</arg>
<doc>Test uploading a single file. The go.mod argument should
be the absolute path to the file.</doc>
<kw name="Get Binary File" library="OperatingSystem">
<var>${file_data}</var>
<arg>${file_path}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20230619 22:05:28.387" level="INFO" html="true">Getting file '&lt;a href="file:///w/go.mod"&gt;/w/go.mod&lt;/a&gt;'.</msg>
<msg timestamp="20230619 22:05:28.387" level="INFO">${file_data} = module github.com/madworx/caddy-put-upload

go 1.19

require (
	github.com/caddyserver/caddy/v2 v2.6.4
	github.com/stretchr/testify v1.8.1
)

require (
	github.com/kr/text v0.2.0 // indirect
	github.c...</msg>
<status status="PASS" starttime="20230619 22:05:28.386" endtime="20230619 22:05:28.387"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${file_name}</var>
<arg>/upload/test.txt</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230619 22:05:28.387" level="INFO">${file_name} = /upload/test.txt</msg>
<status status="PASS" starttime="20230619 22:05:28.387" endtime="20230619 22:05:28.387"/>
</kw>
<kw name="PUT" library="RequestsLibrary">
<var>${response}</var>
<arg>${url}${file_name}</arg>
<arg>data=${file_data}</arg>
<arg>expected_status=${expected_status}</arg>
<doc>Sends a PUT request.</doc>
<msg timestamp="20230619 22:05:28.389" level="INFO">PUT Request : url=http://localhost:8080//upload/test.txt 
 path_url=//upload/test.txt 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '6839'} 
 body=b'module github.com/madworx/caddy-put-upload\n\ngo 1.19\n\nrequire (\n\tgithub.com/caddyserver/caddy/v2 v2.6.4\n\tgithub.com/stretchr/testify v1.8.1\n)\n\nrequire (\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/rogpeppe/go-internal v1.10.0 // indirect\n)\n\nrequire (\n\tfilippo.io/edwards25519 v1.0.0 // indirect\n\tgithub.com/AndreasBriese/bbloom v0.0.0-20190825152654-46b345b51c96 // indirect\n\tgithub.com/BurntSushi/toml v1.2.1 // indirect\n\tgithub.com/Masterminds/goutils v1.1.1 // indirect\n\tgithub.com/Masterminds/semver/v3 v3.2.0 // indirect\n\tgithub.com/Masterminds/sprig/v3 v3.2.3 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.0 // indirect\n\tgithub.com/alecthomas/chroma/v2 v2.5.0 // indirect\n\tgithub.com/antlr/antlr4/runtime/Go/antlr v1.4.10 // indirect\n\tgithub.com/aryann/difflib v0.0.0-20210328193216-ff5ff6dc229b // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/caddyserver/certmagic v0.17.2 // indirect\n\tgithub.com/cenkalti/backoff/v4 v4.1.2 // indirect\n\tgithub.com/cespare/xxhash v1.1.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.1.2 // indirect\n\tgithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.2 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/dgraph-io/badger v1.6.2 // indirect\n\tgithub.com/dgraph-io/badger/v2 v2.2007.4 // indirect\n\tgithub.com/dgraph-io/ristretto v0.1.0 // indirect\n\tgithub.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13 // indirect\n\tgithub.com/dlclark/regexp2 v1.7.0 // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.3 // indirect\n\tgithub.com/fxamacker/cbor/v2 v2.4.0 // indirect\n\tgithub.com/go-chi/chi v4.1.2+incompatible // indirect\n\tgithub.com/go-kit/kit v0.10.0 // indirect\n\tgithub.com/go-logfmt/logfmt v0.5.1 // indirect\n\tgithub.com/go-logr/logr v1.2.3 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-sql-driver/mysql v1.6.0 // indirect\n\tgithub.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0 // indirect\n\tgithub.com/golang/glog v1.0.0 // indirect\n\tgithub.com/golang/mock v1.6.0 // indirect\n\tgithub.com/golang/protobuf v1.5.2 // indirect\n\tgithub.com/golang/snappy v0.0.4 // indirect\n\tgithub.com/google/cel-go v0.13.0 // indirect\n\tgithub.com/google/pprof v0.0.0-20210407192527-94a9f03dee38 // indirect\n\tgithub.com/google/uuid v1.3.0 // indirect\n\tgithub.com/grpc-ecosystem/grpc-gateway v1.16.0 // indirect\n\tgithub.com/huandu/xstrings v1.3.3 // indirect\n\tgithub.com/imdario/mergo v0.3.12 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.0.1 // indirect\n\tgithub.com/jackc/chunkreader/v2 v2.0.1 // indirect\n\tgithub.com/jackc/pgconn v1.13.0 // indirect\n\tgithub.com/jackc/pgio v1.0.0 // indirect\n\tgithub.com/jackc/pgpassfile v1.0.0 // indirect\n\tgithub.com/jackc/pgproto3/v2 v2.3.1 // indirect\n\tgithub.com/jackc/pgservicefile v0.0.0-20200714003250-2b9c44734f2b // indirect\n\tgithub.com/jackc/pgtype v1.12.0 // indirect\n\tgithub.com/jackc/pgx/v4 v4.17.2 // indirect\n\tgithub.com/klauspost/compress v1.15.15 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.3 // indirect\n\tgithub.com/libdns/libdns v0.2.1 // indirect\n\tgithub.com/manifoldco/promptui v0.9.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.8 // indirect\n\tgithub.com/mattn/go-isatty v0.0.13 // indirect\n\tgithub.com/matttproud/golang_protobuf_extensions v1.0.1 // indirect\n\tgithub.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d // indirect\n\tgithub.com/mholt/acmez v1.1.0 // indirect\n\tgithub.com/micromdm/scep/v2 v2.1.0 // indirect\n\tgithub.com/miekg/dns v1.1.50 // indirect\n\tgithub.com/mitchellh/copystructure v1.2.0 // indirect\n\tgithub.com/mitchellh/go-ps v1.0.0 // indirect\n\tgithub.com/mitchellh/reflectwalk v1.0.2 // indirect\n\tgithub.com/onsi/ginkgo/v2 v2.2.0 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/prometheus/client_golang v1.14.0 // indirect\n\tgithub.com/prometheus/client_model v0.3.0 // indirect\n\tgithub.com/prometheus/common v0.37.0 // indirect\n\tgithub.com/prometheus/procfs v0.8.0 // indirect\n\tgithub.com/quic-go/qpack v0.4.0 // indirect\n\tgithub.com/quic-go/qtls-go1-18 v0.2.0 // indirect\n\tgithub.com/quic-go/qtls-go1-19 v0.2.0 // indirect\n\tgithub.com/quic-go/qtls-go1-20 v0.1.0 // indirect\n\tgithub.com/quic-go/quic-go v0.32.0 // indirect\n\tgithub.com/rs/xid v1.4.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/shopspring/decimal v1.2.0 // indirect\n\tgithub.com/shurcooL/sanitized_anchor_name v1.0.0 // indirect\n\tgithub.com/sirupsen/logrus v1.9.0 // indirect\n\tgithub.com/slackhq/nebula v1.6.1 // indirect\n\tgithub.com/smallstep/certificates v0.23.2 // indirect\n\tgithub.com/smallstep/nosql v0.5.0 // indirect\n\tgithub.com/smallstep/truststore v0.12.1 // indirect\n\tgithub.com/spf13/cast v1.4.1 // indirect\n\tgithub.com/spf13/cobra v1.6.1 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/stoewer/go-strcase v1.2.0 // indirect\n\tgithub.com/tailscale/tscert v0.0.0-20230124224810-c6dc1f4049b2 // indirect\n\tgithub.com/urfave/cli v1.22.12 // indirect\n\tgithub.com/x448/float16 v0.8.4 // indirect\n\tgithub.com/yuin/goldmark v1.5.4 // indirect\n\tgithub.com/yuin/goldmark-highlighting/v2 v2.0.0-20220924101305-151362477c87 // indirect\n\tgo.etcd.io/bbolt v1.3.6 // indirect\n\tgo.mozilla.org/pkcs7 v0.0.0-20210826202110-33d05740a352 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.39.0 // indirect\n\tgo.opentelemetry.io/otel v1.13.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/internal/retry v1.4.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.4.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.4.0 // indirect\n\tgo.opentelemetry.io/otel/metric v0.36.0 // indirect\n\tgo.opentelemetry.io/otel/sdk v1.13.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.13.0 // indirect\n\tgo.opentelemetry.io/proto/otlp v0.12.0 // indirect\n\tgo.step.sm/cli-utils v0.7.5 // indirect\n\tgo.step.sm/crypto v0.23.2 // indirect\n\tgo.step.sm/linkedca v0.19.0 // indirect\n\tgo.uber.org/atomic v1.9.0 // indirect\n\tgo.uber.org/multierr v1.6.0 // indirect\n\tgo.uber.org/zap v1.24.0 // indirect\n\tgolang.org/x/crypto v0.5.0 // indirect\n\tgolang.org/x/exp v0.0.0-20221205204356-47842c84f3db // indirect\n\tgolang.org/x/mod v0.10.0 // indirect\n\tgolang.org/x/net v0.10.0 // indirect\n\tgolang.org/x/sync v0.2.0 // indirect\n\tgolang.org/x/sys v0.8.0 // indirect\n\tgolang.org/x/term v0.8.0 // indirect\n\tgolang.org/x/text v0.9.0 // indirect\n\tgolang.org/x/tools v0.9.3\n\tgoogle.golang.org/genproto v0.0.0-20230202175211-008b39050e57 // indirect\n\tgoogle.golang.org/grpc v1.52.3 // indirect\n\tgoogle.golang.org/protobuf v1.28.1 // indirect\n\tgopkg.in/natefinch/lumberjack.v2 v2.2.1 // indirect\n\tgopkg.in/square/go-jose.v2 v2.6.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\thowett.net/plist v1.0.0 // indirect\n)\n' 
 </msg>
<msg timestamp="20230619 22:05:28.389" level="INFO">PUT Response : url=http://localhost:8080//upload/test.txt 
 status=401, reason=Unauthorized 
 headers={'Server': 'Caddy', 'Www-Authenticate': 'Basic realm="restricted"', 'Date': 'Mon, 19 Jun 2023 22:05:28 GMT', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230619 22:05:28.389" level="INFO">${response} = &lt;Response [401]&gt;</msg>
<status status="PASS" starttime="20230619 22:05:28.387" endtime="20230619 22:05:28.389"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230619 22:05:28.390" level="INFO">&lt;Response [401]&gt;</msg>
<status status="PASS" starttime="20230619 22:05:28.389" endtime="20230619 22:05:28.390"/>
</kw>
<if>
<branch type="IF" condition="${text_expected} == True">
<kw name="Should Match" library="BuiltIn">
<arg>${response.text}</arg>
<arg>File ${file_name} created successfully.\n</arg>
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<status status="NOT RUN" starttime="20230619 22:05:28.390" endtime="20230619 22:05:28.390"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:05:28.390" endtime="20230619 22:05:28.390"/>
</branch>
<status status="PASS" starttime="20230619 22:05:28.390" endtime="20230619 22:05:28.390"/>
</if>
<status status="PASS" starttime="20230619 22:05:28.386" endtime="20230619 22:05:28.390"/>
</kw>
<doc>Unauthenticated uploads should fail</doc>
<status status="PASS" starttime="20230619 22:05:28.385" endtime="20230619 22:05:28.390"/>
</test>
<test id="s1-s4-t3" name="Non PUT should be ignored by module" line="20">
<kw name="Wait Until Caddy Is Ready" library="keywords">
<doc>Return only when Caddy is ready to accept connections</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>30s</arg>
<arg>0.5s</arg>
<arg>GET</arg>
<arg>${BASE_URL}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 22:05:28.393" level="INFO">GET Request : url=http://Bob:hiccup@localhost:8080/ 
 path_url=/ 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Basic Qm9iOmhpY2N1cA=='} 
 body=None 
 </msg>
<msg timestamp="20230619 22:05:28.393" level="INFO">GET Response : url=http://Bob:hiccup@localhost:8080/ 
 status=200, reason=OK 
 headers={'Server': 'Caddy', 'Date': 'Mon, 19 Jun 2023 22:05:28 GMT', 'Content-Length': '0'} 
 body=None 
 </msg>
<status status="PASS" starttime="20230619 22:05:28.391" endtime="20230619 22:05:28.393"/>
</kw>
<status status="PASS" starttime="20230619 22:05:28.391" endtime="20230619 22:05:28.393"/>
</kw>
<status status="PASS" starttime="20230619 22:05:28.391" endtime="20230619 22:05:28.393"/>
</kw>
<doc>Non-PUT operations should be ignored by the module
(this is to improve coverage)</doc>
<status status="PASS" starttime="20230619 22:05:28.390" endtime="20230619 22:05:28.393"/>
</test>
<kw name="Suite Teardown With Caddy" library="keywords" type="TEARDOWN">
<doc>Perform a graceful shutdown if Caddy and run the regular suite teardown</doc>
<kw name="Send Signal To Process" library="Process">
<arg>SIGINT</arg>
<arg>handle=caddy</arg>
<arg>group=True</arg>
<doc>Sends the given ``signal`` to the specified process.</doc>
<msg timestamp="20230619 22:05:28.394" level="INFO">Sending signal SIGINT (2).</msg>
<status status="PASS" starttime="20230619 22:05:28.394" endtime="20230619 22:05:28.394"/>
</kw>
<kw name="Wait For Process" library="Process">
<var>${result}</var>
<arg>timeout=10s</arg>
<arg>on_timeout=terminate</arg>
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<msg timestamp="20230619 22:05:28.395" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:28.497" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:28.497" level="INFO">${result} = &lt;result object with rc -2&gt;</msg>
<status status="PASS" starttime="20230619 22:05:28.394" endtime="20230619 22:05:28.497"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stderr}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230619 22:05:28.498" level="INFO">{"level":"info","ts":1687212327.1408823,"msg":"using provided configuration","config_file":"examples/Caddyfile.basic-auth","config_adapter":""}
{"level":"info","ts":1687212327.1424387,"logger":"admin","msg":"admin endpoint started","address":"localhost:2019","enforce_origin":false,"origins":["//localhost:2019","//[::1]:2019","//127.0.0.1:2019"]}
{"level":"info","ts":1687212327.1426532,"logger":"tls.cache.maintenance","msg":"started background certificate maintenance","cache":"0xc0003792d0"}
{"level":"info","ts":1687212327.1427333,"logger":"http.log","msg":"server running","name":"srv0","protocols":["h1","h2","h3"]}
{"level":"info","ts":1687212327.142845,"logger":"tls","msg":"cleaning storage unit","description":"FileStorage:/w/.local/share/caddy"}
{"level":"info","ts":1687212327.1428714,"logger":"tls","msg":"finished cleaning storage units"}
{"level":"info","ts":1687212327.142878,"msg":"autosaved config (load with --resume flag)","file":"/w/.config/caddy/autosave.json"}
{"level":"info","ts":1687212327.1428843,"msg":"serving initial configuration"}
{"level":"info","ts":1687212328.3942876,"msg":"shutting down","signal":"SIGINT"}
{"level":"warn","ts":1687212328.394322,"msg":"exiting; byeee!! 👋","signal":"SIGINT"}
{"level":"info","ts":1687212328.394474,"logger":"tls.cache.maintenance","msg":"stopped background certificate maintenance","cache":"0xc0003792d0"}
{"level":"info","ts":1687212328.3945105,"logger":"admin","msg":"stopped previous server","address":"localhost:2019"}
{"level":"info","ts":1687212328.3945155,"msg":"shutdown complete","signal":"SIGINT","exit_code":0}</msg>
<status status="PASS" starttime="20230619 22:05:28.497" endtime="20230619 22:05:28.498"/>
</kw>
<kw name="Suite Teardown" library="keywords">
<doc>Generate coverage report and remove coverage directory</doc>
<kw name="Generate Coverage Report" library="keywords">
<doc>Generate coverage report from generated files</doc>
<kw name="Get Coverage Filename From Suite Source" library="keywords">
<var>${cov_path}</var>
<var>${cov_filename}</var>
<doc>Splits `/w/e2e_tests/004_requests.robot` into path and filename. Constructs a
path to the coverage file in `/w/e2e_tests/results`. Returns the coverage full file
path and the coverage filename separately.</doc>
<kw name="Split Path" library="OperatingSystem">
<var>${path}</var>
<var>${suite_filename}</var>
<arg>${SUITE SOURCE}</arg>
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<msg timestamp="20230619 22:05:28.500" level="INFO">${path} = /w/e2e_tests</msg>
<msg timestamp="20230619 22:05:28.500" level="INFO">${suite_filename} = 004_requests.robot</msg>
<status status="PASS" starttime="20230619 22:05:28.500" endtime="20230619 22:05:28.500"/>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<var>${suite_name}</var>
<var>${ext}</var>
<arg>${suite_filename}</arg>
<doc>Splits the extension from the given path.</doc>
<msg timestamp="20230619 22:05:28.500" level="INFO">${suite_name} = 004_requests</msg>
<msg timestamp="20230619 22:05:28.500" level="INFO">${ext} = robot</msg>
<status status="PASS" starttime="20230619 22:05:28.500" endtime="20230619 22:05:28.500"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${cov_path}</var>
<arg>${OUTPUT DIR}</arg>
<arg>${suite_name}.coverage</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20230619 22:05:28.501" level="INFO">${cov_path} = /w/e2e_tests/results/004_requests.coverage</msg>
<status status="PASS" starttime="20230619 22:05:28.500" endtime="20230619 22:05:28.501"/>
</kw>
<return>
<value>${cov_path}</value>
<value>${suite_name}.coverage</value>
<status status="PASS" starttime="20230619 22:05:28.501" endtime="20230619 22:05:28.501"/>
</return>
<msg timestamp="20230619 22:05:28.501" level="INFO">${cov_path} = /w/e2e_tests/results/004_requests.coverage</msg>
<msg timestamp="20230619 22:05:28.501" level="INFO">${cov_filename} = 004_requests.coverage</msg>
<status status="PASS" starttime="20230619 22:05:28.499" endtime="20230619 22:05:28.501"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${dir_exists}</var>
<arg>Directory Should Exist</arg>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Directory Should Exist" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Fails unless the given path points to an existing directory.</doc>
<msg timestamp="20230619 22:05:28.502" level="INFO" html="true">Directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230619 22:05:28.501" endtime="20230619 22:05:28.502"/>
</kw>
<msg timestamp="20230619 22:05:28.502" level="INFO">${dir_exists} = True</msg>
<status status="PASS" starttime="20230619 22:05:28.501" endtime="20230619 22:05:28.502"/>
</kw>
<if>
<branch type="IF" condition="${dir_exists}">
<kw name="List Files In Directory" library="OperatingSystem">
<var>${dir_contents}</var>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Wrapper for `List Directory` that returns only files.</doc>
<msg timestamp="20230619 22:05:28.502" level="INFO" html="true">Listing contents of directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<msg timestamp="20230619 22:05:28.502" level="INFO">2 files:
covcounters.6b007adb3d230b7f717346764648bf5a.8166.1687212328394534971
covmeta.6b007adb3d230b7f717346764648bf5a</msg>
<msg timestamp="20230619 22:05:28.502" level="INFO">${dir_contents} = ['covcounters.6b007adb3d230b7f717346764648bf5a.8166.1687212328394534971', 'covmeta.6b007adb3d230b7f717346764648bf5a']</msg>
<status status="PASS" starttime="20230619 22:05:28.502" endtime="20230619 22:05:28.502"/>
</kw>
<status status="PASS" starttime="20230619 22:05:28.502" endtime="20230619 22:05:28.502"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${dir_contents}</var>
<arg>${None}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230619 22:05:28.503" endtime="20230619 22:05:28.503"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:05:28.502" endtime="20230619 22:05:28.503"/>
</branch>
<status status="PASS" starttime="20230619 22:05:28.502" endtime="20230619 22:05:28.503"/>
</if>
<if>
<branch type="IF" condition="${dir_contents}">
<kw name="Convert Coverage Fragments" library="keywords">
<arg>${cov_path}</arg>
<doc>Convert coverage fragments (from a go run/build -cover execution) into
a single file</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>go tool covdata textfmt -i\=${OUTPUT DIR}/go-coverage -o\=${cov_path}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:28.503" level="INFO">Starting process:
go tool covdata textfmt -i=/w/e2e_tests/results/go-coverage -o=/w/e2e_tests/results/004_requests.coverage</msg>
<msg timestamp="20230619 22:05:28.507" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:28.514" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:28.515" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:28.503" endtime="20230619 22:05:28.515"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:28.516" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:28.515" endtime="20230619 22:05:28.516"/>
</kw>
<status status="PASS" starttime="20230619 22:05:28.503" endtime="20230619 22:05:28.516"/>
</kw>
<status status="PASS" starttime="20230619 22:05:28.503" endtime="20230619 22:05:28.516"/>
</branch>
<status status="PASS" starttime="20230619 22:05:28.503" endtime="20230619 22:05:28.516"/>
</if>
<kw name="Expect Successful Execution" library="keywords">
<arg>go tool cover -html\=${cov_path} -o\=${cov_path}.html</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:28.518" level="INFO">Starting process:
go tool cover -html=/w/e2e_tests/results/004_requests.coverage -o=/w/e2e_tests/results/004_requests.coverage.html</msg>
<msg timestamp="20230619 22:05:28.521" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:28.844" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:28.845" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:28.518" endtime="20230619 22:05:28.845"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:05:28.846" endtime="20230619 22:05:28.847"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:05:28.845" endtime="20230619 22:05:28.847"/>
</branch>
<status status="PASS" starttime="20230619 22:05:28.845" endtime="20230619 22:05:28.847"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:28.847" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:28.847" endtime="20230619 22:05:28.848"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:05:28.848" endtime="20230619 22:05:28.848"/>
</return>
<status status="PASS" starttime="20230619 22:05:28.517" endtime="20230619 22:05:28.848"/>
</kw>
<kw name="Expect Successful Execution" library="keywords">
<var>${result}</var>
<arg>go tool cover -func\=${cov_path}</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:28.850" level="INFO">Starting process:
go tool cover -func=/w/e2e_tests/results/004_requests.coverage</msg>
<msg timestamp="20230619 22:05:28.853" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:05:29.189" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:05:29.189" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:28.849" endtime="20230619 22:05:29.189"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:05:29.191" endtime="20230619 22:05:29.191"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:05:29.190" endtime="20230619 22:05:29.191"/>
</branch>
<status status="PASS" starttime="20230619 22:05:29.190" endtime="20230619 22:05:29.191"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:05:29.192" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:05:29.191" endtime="20230619 22:05:29.192"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:05:29.192" endtime="20230619 22:05:29.192"/>
</return>
<msg timestamp="20230619 22:05:29.192" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:28.849" endtime="20230619 22:05:29.192"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${percent}</var>
<arg>${result.stdout}</arg>
<arg>total:.*?([0-9.]+%)$</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20230619 22:05:29.193" level="INFO">${percent} = ['78.3%']</msg>
<status status="PASS" starttime="20230619 22:05:29.192" endtime="20230619 22:05:29.193"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>Code coverage</arg>
<arg>${percent[0]} [${cov_filename}.html|HTML Report] | [${cov_filename}|Coverage file]</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20230619 22:05:29.194" level="INFO">Set suite metadata 'Code coverage' to value '78.3% [004_requests.coverage.html|HTML Report] | [004_requests.coverage|Coverage file]'.</msg>
<status status="PASS" starttime="20230619 22:05:29.193" endtime="20230619 22:05:29.194"/>
</kw>
<status status="PASS" starttime="20230619 22:05:28.499" endtime="20230619 22:05:29.194"/>
</kw>
<kw name="Remove Directory" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<arg>recursive=True</arg>
<doc>Removes the directory pointed to by the given ``path``.</doc>
<msg timestamp="20230619 22:05:29.195" level="INFO" html="true">Removed directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 22:05:29.194" endtime="20230619 22:05:29.195"/>
</kw>
<status status="PASS" starttime="20230619 22:05:28.498" endtime="20230619 22:05:29.195"/>
</kw>
<status status="PASS" starttime="20230619 22:05:28.394" endtime="20230619 22:05:29.195"/>
</kw>
<doc>Executes test cases for handling file uploads
and processing non-PUT operations.</doc>
<meta name="Code coverage">78.3% [004_requests.coverage.html|HTML Report] | [004_requests.coverage|Coverage file]</meta>
<status status="PASS" starttime="20230619 22:05:25.188" endtime="20230619 22:05:29.195"/>
</suite>
<suite id="s1-s5" name="005 Binaries" source="/w/e2e_tests/005_binaries.robot">
<test id="s1-s5-t1" name="Build distribution binaries" line="9">
<kw name="Expect Successful Execution" library="keywords">
<arg>make dist-all</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:05:29.204" level="INFO">Starting process:
make dist-all</msg>
<msg timestamp="20230619 22:05:29.206" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:07:49.251" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:07:49.251" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:05:29.203" endtime="20230619 22:07:49.251"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:07:49.253" endtime="20230619 22:07:49.253"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:07:49.252" endtime="20230619 22:07:49.253"/>
</branch>
<status status="PASS" starttime="20230619 22:07:49.251" endtime="20230619 22:07:49.253"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:07:49.254" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:07:49.253" endtime="20230619 22:07:49.254"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:07:49.254" endtime="20230619 22:07:49.254"/>
</return>
<status status="PASS" starttime="20230619 22:05:29.203" endtime="20230619 22:07:49.254"/>
</kw>
<doc>Builds the distribution binaries using the
'make dist-all' command.</doc>
<status status="PASS" starttime="20230619 22:05:29.202" endtime="20230619 22:07:49.255"/>
</test>
<test id="s1-s5-t2" name="Built binaries should run" line="15">
<kw name="List Files In Directory" library="OperatingSystem">
<var>${binary_list}</var>
<arg>./dist/</arg>
<doc>Wrapper for `List Directory` that returns only files.</doc>
<msg timestamp="20230619 22:07:49.256" level="INFO" html="true">Listing contents of directory '&lt;a href="file:///w/dist"&gt;/w/dist&lt;/a&gt;'.</msg>
<msg timestamp="20230619 22:07:49.257" level="INFO">2 files:
caddy-put-linux-x86_64
caddy-put-security-linux-x86_64</msg>
<msg timestamp="20230619 22:07:49.257" level="INFO">${binary_list} = ['caddy-put-linux-x86_64', 'caddy-put-security-linux-x86_64']</msg>
<status status="PASS" starttime="20230619 22:07:49.256" endtime="20230619 22:07:49.257"/>
</kw>
<for flavor="IN">
<var>${binary}</var>
<value>@{binary_list}</value>
<iter>
<var name="${binary}">caddy-put-linux-x86_64</var>
<kw name="Expect Successful Execution" library="keywords">
<arg>./dist/${binary} list-modules</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:07:49.259" level="INFO">Starting process:
./dist/caddy-put-linux-x86_64 list-modules</msg>
<msg timestamp="20230619 22:07:49.262" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:07:49.299" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:07:49.299" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:07:49.259" endtime="20230619 22:07:49.299"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:07:49.300" endtime="20230619 22:07:49.301"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:07:49.299" endtime="20230619 22:07:49.301"/>
</branch>
<status status="PASS" starttime="20230619 22:07:49.299" endtime="20230619 22:07:49.301"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:07:49.301" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:07:49.301" endtime="20230619 22:07:49.302"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:07:49.302" endtime="20230619 22:07:49.302"/>
</return>
<status status="PASS" starttime="20230619 22:07:49.258" endtime="20230619 22:07:49.302"/>
</kw>
<status status="PASS" starttime="20230619 22:07:49.257" endtime="20230619 22:07:49.302"/>
</iter>
<iter>
<var name="${binary}">caddy-put-security-linux-x86_64</var>
<kw name="Expect Successful Execution" library="keywords">
<arg>./dist/${binary} list-modules</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:07:49.304" level="INFO">Starting process:
./dist/caddy-put-security-linux-x86_64 list-modules</msg>
<msg timestamp="20230619 22:07:49.307" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:07:49.382" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:07:49.382" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:07:49.304" endtime="20230619 22:07:49.382"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:07:49.384" endtime="20230619 22:07:49.384"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:07:49.383" endtime="20230619 22:07:49.384"/>
</branch>
<status status="PASS" starttime="20230619 22:07:49.383" endtime="20230619 22:07:49.384"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:07:49.385" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:07:49.384" endtime="20230619 22:07:49.385"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:07:49.385" endtime="20230619 22:07:49.385"/>
</return>
<status status="PASS" starttime="20230619 22:07:49.303" endtime="20230619 22:07:49.385"/>
</kw>
<status status="PASS" starttime="20230619 22:07:49.302" endtime="20230619 22:07:49.385"/>
</iter>
<status status="PASS" starttime="20230619 22:07:49.257" endtime="20230619 22:07:49.385"/>
</for>
<doc>Verifies that all the built binaries in the 'dist/'
subdirectory execute successfully.</doc>
<status status="PASS" starttime="20230619 22:07:49.255" endtime="20230619 22:07:49.385"/>
</test>
<doc>Verifies the build process of distribution binaries and
ensures that the built binaries execute successfully.</doc>
<status status="PASS" starttime="20230619 22:05:29.196" endtime="20230619 22:07:49.386"/>
</suite>
<suite id="s1-s6" name="006 Summary" source="/w/e2e_tests/006_summary.robot">
<test id="s1-s6-t1" name="Collate code coverage reports" line="11">
<kw name="Get Coverage Filename From Suite Source" library="keywords">
<var>${cov_path}</var>
<var>${cov_filename}</var>
<doc>Splits `/w/e2e_tests/006_summary.robot` into path and filename. Constructs a
path to the coverage file in `/w/e2e_tests/results`. Returns the coverage full file
path and the coverage filename separately.</doc>
<kw name="Split Path" library="OperatingSystem">
<var>${path}</var>
<var>${suite_filename}</var>
<arg>${SUITE SOURCE}</arg>
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<msg timestamp="20230619 22:07:49.393" level="INFO">${path} = /w/e2e_tests</msg>
<msg timestamp="20230619 22:07:49.393" level="INFO">${suite_filename} = 006_summary.robot</msg>
<status status="PASS" starttime="20230619 22:07:49.392" endtime="20230619 22:07:49.393"/>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<var>${suite_name}</var>
<var>${ext}</var>
<arg>${suite_filename}</arg>
<doc>Splits the extension from the given path.</doc>
<msg timestamp="20230619 22:07:49.393" level="INFO">${suite_name} = 006_summary</msg>
<msg timestamp="20230619 22:07:49.393" level="INFO">${ext} = robot</msg>
<status status="PASS" starttime="20230619 22:07:49.393" endtime="20230619 22:07:49.393"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${cov_path}</var>
<arg>${OUTPUT DIR}</arg>
<arg>${suite_name}.coverage</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20230619 22:07:49.393" level="INFO">${cov_path} = /w/e2e_tests/results/006_summary.coverage</msg>
<status status="PASS" starttime="20230619 22:07:49.393" endtime="20230619 22:07:49.394"/>
</kw>
<return>
<value>${cov_path}</value>
<value>${suite_name}.coverage</value>
<status status="PASS" starttime="20230619 22:07:49.394" endtime="20230619 22:07:49.394"/>
</return>
<msg timestamp="20230619 22:07:49.394" level="INFO">${cov_path} = /w/e2e_tests/results/006_summary.coverage</msg>
<msg timestamp="20230619 22:07:49.394" level="INFO">${cov_filename} = 006_summary.coverage</msg>
<status status="PASS" starttime="20230619 22:07:49.392" endtime="20230619 22:07:49.394"/>
</kw>
<kw name="Expect Successful Execution" library="keywords">
<arg>go run cmd/gocovmerge/gocovmerge.go ${OUTPUT DIR}/*.coverage &gt; ${cov_path}</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:07:49.396" level="INFO">Starting process:
go run cmd/gocovmerge/gocovmerge.go /w/e2e_tests/results/*.coverage &gt; /w/e2e_tests/results/006_summary.coverage</msg>
<msg timestamp="20230619 22:07:49.399" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:07:49.626" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:07:49.627" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:07:49.395" endtime="20230619 22:07:49.627"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:07:49.628" endtime="20230619 22:07:49.628"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:07:49.627" endtime="20230619 22:07:49.628"/>
</branch>
<status status="PASS" starttime="20230619 22:07:49.627" endtime="20230619 22:07:49.628"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:07:49.629" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:07:49.629" endtime="20230619 22:07:49.629"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:07:49.629" endtime="20230619 22:07:49.630"/>
</return>
<status status="PASS" starttime="20230619 22:07:49.395" endtime="20230619 22:07:49.630"/>
</kw>
<kw name="Generate Coverage Report" library="keywords">
<doc>Generate coverage report from generated files</doc>
<kw name="Get Coverage Filename From Suite Source" library="keywords">
<var>${cov_path}</var>
<var>${cov_filename}</var>
<doc>Splits `/w/e2e_tests/006_summary.robot` into path and filename. Constructs a
path to the coverage file in `/w/e2e_tests/results`. Returns the coverage full file
path and the coverage filename separately.</doc>
<kw name="Split Path" library="OperatingSystem">
<var>${path}</var>
<var>${suite_filename}</var>
<arg>${SUITE SOURCE}</arg>
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<msg timestamp="20230619 22:07:49.631" level="INFO">${path} = /w/e2e_tests</msg>
<msg timestamp="20230619 22:07:49.631" level="INFO">${suite_filename} = 006_summary.robot</msg>
<status status="PASS" starttime="20230619 22:07:49.630" endtime="20230619 22:07:49.631"/>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<var>${suite_name}</var>
<var>${ext}</var>
<arg>${suite_filename}</arg>
<doc>Splits the extension from the given path.</doc>
<msg timestamp="20230619 22:07:49.631" level="INFO">${suite_name} = 006_summary</msg>
<msg timestamp="20230619 22:07:49.631" level="INFO">${ext} = robot</msg>
<status status="PASS" starttime="20230619 22:07:49.631" endtime="20230619 22:07:49.631"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${cov_path}</var>
<arg>${OUTPUT DIR}</arg>
<arg>${suite_name}.coverage</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20230619 22:07:49.632" level="INFO">${cov_path} = /w/e2e_tests/results/006_summary.coverage</msg>
<status status="PASS" starttime="20230619 22:07:49.632" endtime="20230619 22:07:49.632"/>
</kw>
<return>
<value>${cov_path}</value>
<value>${suite_name}.coverage</value>
<status status="PASS" starttime="20230619 22:07:49.632" endtime="20230619 22:07:49.632"/>
</return>
<msg timestamp="20230619 22:07:49.632" level="INFO">${cov_path} = /w/e2e_tests/results/006_summary.coverage</msg>
<msg timestamp="20230619 22:07:49.632" level="INFO">${cov_filename} = 006_summary.coverage</msg>
<status status="PASS" starttime="20230619 22:07:49.630" endtime="20230619 22:07:49.632"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${dir_exists}</var>
<arg>Directory Should Exist</arg>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Directory Should Exist" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Fails unless the given path points to an existing directory.</doc>
<msg timestamp="20230619 22:07:49.633" level="FAIL">Directory '/w/e2e_tests/results/go-coverage' does not exist.</msg>
<status status="FAIL" starttime="20230619 22:07:49.633" endtime="20230619 22:07:49.633"/>
</kw>
<msg timestamp="20230619 22:07:49.633" level="INFO">${dir_exists} = False</msg>
<status status="PASS" starttime="20230619 22:07:49.632" endtime="20230619 22:07:49.633"/>
</kw>
<if>
<branch type="IF" condition="${dir_exists}">
<kw name="List Files In Directory" library="OperatingSystem">
<var>${dir_contents}</var>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Wrapper for `List Directory` that returns only files.</doc>
<status status="NOT RUN" starttime="20230619 22:07:49.633" endtime="20230619 22:07:49.633"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:07:49.633" endtime="20230619 22:07:49.633"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${dir_contents}</var>
<arg>${None}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230619 22:07:49.634" level="INFO">${dir_contents} = None</msg>
<status status="PASS" starttime="20230619 22:07:49.634" endtime="20230619 22:07:49.634"/>
</kw>
<status status="PASS" starttime="20230619 22:07:49.633" endtime="20230619 22:07:49.634"/>
</branch>
<status status="PASS" starttime="20230619 22:07:49.633" endtime="20230619 22:07:49.634"/>
</if>
<if>
<branch type="IF" condition="${dir_contents}">
<kw name="Convert Coverage Fragments" library="keywords">
<arg>${cov_path}</arg>
<doc>Convert coverage fragments (from a go run/build -cover execution) into
a single file</doc>
<status status="NOT RUN" starttime="20230619 22:07:49.634" endtime="20230619 22:07:49.634"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:07:49.634" endtime="20230619 22:07:49.634"/>
</branch>
<status status="PASS" starttime="20230619 22:07:49.634" endtime="20230619 22:07:49.634"/>
</if>
<kw name="Expect Successful Execution" library="keywords">
<arg>go tool cover -html\=${cov_path} -o\=${cov_path}.html</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:07:49.636" level="INFO">Starting process:
go tool cover -html=/w/e2e_tests/results/006_summary.coverage -o=/w/e2e_tests/results/006_summary.coverage.html</msg>
<msg timestamp="20230619 22:07:49.639" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:07:50.105" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:07:50.106" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:07:49.636" endtime="20230619 22:07:50.106"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:07:50.107" endtime="20230619 22:07:50.107"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:07:50.106" endtime="20230619 22:07:50.107"/>
</branch>
<status status="PASS" starttime="20230619 22:07:50.106" endtime="20230619 22:07:50.107"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:07:50.108" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:07:50.107" endtime="20230619 22:07:50.108"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:07:50.108" endtime="20230619 22:07:50.108"/>
</return>
<status status="PASS" starttime="20230619 22:07:49.635" endtime="20230619 22:07:50.109"/>
</kw>
<kw name="Expect Successful Execution" library="keywords">
<var>${result}</var>
<arg>go tool cover -func\=${cov_path}</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 22:07:50.111" level="INFO">Starting process:
go tool cover -func=/w/e2e_tests/results/006_summary.coverage</msg>
<msg timestamp="20230619 22:07:50.113" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 22:07:50.520" level="INFO">Process completed.</msg>
<msg timestamp="20230619 22:07:50.521" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:07:50.110" endtime="20230619 22:07:50.521"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 22:07:50.523" endtime="20230619 22:07:50.523"/>
</kw>
<status status="NOT RUN" starttime="20230619 22:07:50.521" endtime="20230619 22:07:50.523"/>
</branch>
<status status="PASS" starttime="20230619 22:07:50.521" endtime="20230619 22:07:50.523"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 22:07:50.524" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 22:07:50.523" endtime="20230619 22:07:50.524"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 22:07:50.524" endtime="20230619 22:07:50.524"/>
</return>
<msg timestamp="20230619 22:07:50.524" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 22:07:50.110" endtime="20230619 22:07:50.524"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${percent}</var>
<arg>${result.stdout}</arg>
<arg>total:.*?([0-9.]+%)$</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20230619 22:07:50.525" level="INFO">${percent} = ['82.6%']</msg>
<status status="PASS" starttime="20230619 22:07:50.524" endtime="20230619 22:07:50.525"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>Code coverage</arg>
<arg>${percent[0]} [${cov_filename}.html|HTML Report] | [${cov_filename}|Coverage file]</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20230619 22:07:50.526" level="INFO">Set suite metadata 'Code coverage' to value '82.6% [006_summary.coverage.html|HTML Report] | [006_summary.coverage|Coverage file]'.</msg>
<status status="PASS" starttime="20230619 22:07:50.525" endtime="20230619 22:07:50.526"/>
</kw>
<status status="PASS" starttime="20230619 22:07:49.630" endtime="20230619 22:07:50.526"/>
</kw>
<doc>Combine all code coverage profiles into one.</doc>
<status status="PASS" starttime="20230619 22:07:49.392" endtime="20230619 22:07:50.526"/>
</test>
<doc>Aggregate multiple code coverage reports into a single report.
It leverages the gocovmerge utility, a Go tool that merges multiple
coverage profiles. The suite utilizes keywords defined in the
resources/keywords.robot file.</doc>
<meta name="Code coverage">82.6% [006_summary.coverage.html|HTML Report] | [006_summary.coverage|Coverage file]</meta>
<status status="PASS" starttime="20230619 22:07:49.387" endtime="20230619 22:07:50.527"/>
</suite>
<status status="FAIL" starttime="20230619 22:03:37.316" endtime="20230619 22:07:50.528"/>
</suite>
<statistics>
<total>
<stat pass="14" fail="1" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="14" fail="1" skip="0" id="s1" name="E2E Tests">E2E Tests</stat>
<stat pass="2" fail="1" skip="0" id="s1-s1" name="001 Source Code">E2E Tests.001 Source Code</stat>
<stat pass="2" fail="0" skip="0" id="s1-s2" name="002 Unit Tests">E2E Tests.002 Unit Tests</stat>
<stat pass="4" fail="0" skip="0" id="s1-s3" name="003 Configuration">E2E Tests.003 Configuration</stat>
<stat pass="3" fail="0" skip="0" id="s1-s4" name="004 Requests">E2E Tests.004 Requests</stat>
<stat pass="2" fail="0" skip="0" id="s1-s5" name="005 Binaries">E2E Tests.005 Binaries</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="006 Summary">E2E Tests.006 Summary</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
