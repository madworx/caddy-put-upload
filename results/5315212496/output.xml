<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1 (Python 3.9.2 on linux)" generated="20230619 18:52:23.272" rpa="false" schemaversion="4">
<suite id="s1" name="E2E Tests" source="/w/e2e_tests">
<suite id="s1-s1" name="001 Source Code" source="/w/e2e_tests/001_source_code.robot">
<test id="s1-s1-t1" name="Golang" line="8">
<kw name="Expect Successful Execution" library="keywords">
<arg>make lint-go</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:52:23.381" level="INFO">Starting process:
make lint-go</msg>
<msg timestamp="20230619 18:52:23.422" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:52:51.283" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:52:51.284" level="INFO">${result} = &lt;result object with rc 2&gt;</msg>
<status status="PASS" starttime="20230619 18:52:23.381" endtime="20230619 18:52:51.284"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20230619 18:52:51.286" level="INFO">go: downloading honnef.co/go/tools v0.4.3
go: downloading golang.org/x/tools v0.4.1-0.20221208213631-3f74d914ae6d
go: downloading golang.org/x/exp/typeparams v0.0.0-20221208152030-732eee02a75a
go: downloading golang.org/x/sys v0.3.0
go: downloading github.com/BurntSushi/toml v1.2.1
go: downloading golang.org/x/mod v0.7.0
honnef.co/go/tools/cmd/staticcheck: go install honnef.co/go/tools/cmd/staticcheck: copying /tmp/go-build3468373877/b001/exe/a.out: open /go/bin/staticcheck: permission denied
make[1]: *** [Makefile:39: .lint-go.done] Error 1</msg>
<msg timestamp="20230619 18:52:51.286" level="INFO">make[1]: Entering directory '/w'
go install honnef.co/go/tools/cmd/staticcheck@latest
make[1]: Leaving directory '/w'</msg>
<status status="PASS" starttime="20230619 18:52:51.285" endtime="20230619 18:52:51.286"/>
</kw>
<status status="PASS" starttime="20230619 18:52:51.284" endtime="20230619 18:52:51.286"/>
</branch>
<status status="PASS" starttime="20230619 18:52:51.284" endtime="20230619 18:52:51.286"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:52:51.287" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20230619 18:52:51.287" level="FAIL">2 != 0</msg>
<status status="FAIL" starttime="20230619 18:52:51.286" endtime="20230619 18:52:51.288"/>
</kw>
<return>
<value>${result}</value>
<status status="NOT RUN" starttime="20230619 18:52:51.288" endtime="20230619 18:52:51.288"/>
</return>
<status status="FAIL" starttime="20230619 18:52:23.381" endtime="20230619 18:52:51.288"/>
</kw>
<doc>Lint Golang code</doc>
<status status="FAIL" starttime="20230619 18:52:23.379" endtime="20230619 18:52:51.288">2 != 0</status>
</test>
<test id="s1-s1-t2" name="Robot Framework" line="12">
<kw name="Expect Successful Execution" library="keywords">
<arg>make lint-robot</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:52:51.292" level="INFO">Starting process:
make lint-robot</msg>
<msg timestamp="20230619 18:52:51.295" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:52:51.965" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:52:51.966" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:52:51.291" endtime="20230619 18:52:51.966"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:52:51.967" endtime="20230619 18:52:51.967"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:52:51.966" endtime="20230619 18:52:51.968"/>
</branch>
<status status="PASS" starttime="20230619 18:52:51.966" endtime="20230619 18:52:51.968"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:52:51.968" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:52:51.968" endtime="20230619 18:52:51.968"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:52:51.968" endtime="20230619 18:52:51.969"/>
</return>
<status status="PASS" starttime="20230619 18:52:51.291" endtime="20230619 18:52:51.969"/>
</kw>
<doc>Lint Robot Framework code</doc>
<status status="PASS" starttime="20230619 18:52:51.289" endtime="20230619 18:52:51.969"/>
</test>
<test id="s1-s1-t3" name="Python" line="16">
<kw name="Expect Successful Execution" library="keywords">
<arg>make lint-python</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:52:51.972" level="INFO">Starting process:
make lint-python</msg>
<msg timestamp="20230619 18:52:51.974" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:52:54.333" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:52:54.334" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:52:51.971" endtime="20230619 18:52:54.334"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:52:54.335" endtime="20230619 18:52:54.335"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:52:54.334" endtime="20230619 18:52:54.335"/>
</branch>
<status status="PASS" starttime="20230619 18:52:54.334" endtime="20230619 18:52:54.335"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:52:54.336" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:52:54.335" endtime="20230619 18:52:54.336"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:52:54.336" endtime="20230619 18:52:54.336"/>
</return>
<status status="PASS" starttime="20230619 18:52:51.971" endtime="20230619 18:52:54.336"/>
</kw>
<doc>Lint Python code</doc>
<status status="PASS" starttime="20230619 18:52:51.969" endtime="20230619 18:52:54.337"/>
</test>
<doc>This test suite performs code linting for different languages.</doc>
<status status="FAIL" starttime="20230619 18:52:23.293" endtime="20230619 18:52:54.338"/>
</suite>
<suite id="s1-s2" name="002 Unit Tests" source="/w/e2e_tests/002_unit_tests.robot">
<kw name="Suite Setup" library="keywords" type="SETUP">
<doc>Ensure there is a directory for coverage files</doc>
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20230619 18:52:54.345" level="INFO" html="true">Created directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 18:52:54.345" endtime="20230619 18:52:54.345"/>
</kw>
<status status="PASS" starttime="20230619 18:52:54.345" endtime="20230619 18:52:54.346"/>
</kw>
<test id="s1-s2-t1" name="Unit tests" line="12">
<kw name="Get Coverage Filename From Suite Source" library="keywords">
<var>${cov_path}</var>
<var>${cov_filename}</var>
<doc>Splits `/w/e2e_tests/002_unit_tests.robot` into path and filename. Constructs a
path to the coverage file in `/w/e2e_tests/results`. Returns the coverage full file
path and the coverage filename separately.</doc>
<kw name="Split Path" library="OperatingSystem">
<var>${path}</var>
<var>${suite_filename}</var>
<arg>${SUITE SOURCE}</arg>
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<msg timestamp="20230619 18:52:54.347" level="INFO">${path} = /w/e2e_tests</msg>
<msg timestamp="20230619 18:52:54.347" level="INFO">${suite_filename} = 002_unit_tests.robot</msg>
<status status="PASS" starttime="20230619 18:52:54.346" endtime="20230619 18:52:54.347"/>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<var>${suite_name}</var>
<var>${ext}</var>
<arg>${suite_filename}</arg>
<doc>Splits the extension from the given path.</doc>
<msg timestamp="20230619 18:52:54.347" level="INFO">${suite_name} = 002_unit_tests</msg>
<msg timestamp="20230619 18:52:54.347" level="INFO">${ext} = robot</msg>
<status status="PASS" starttime="20230619 18:52:54.347" endtime="20230619 18:52:54.347"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${cov_path}</var>
<arg>${OUTPUT DIR}</arg>
<arg>${suite_name}.coverage</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20230619 18:52:54.348" level="INFO">${cov_path} = /w/e2e_tests/results/002_unit_tests.coverage</msg>
<status status="PASS" starttime="20230619 18:52:54.348" endtime="20230619 18:52:54.348"/>
</kw>
<return>
<value>${cov_path}</value>
<value>${suite_name}.coverage</value>
<status status="PASS" starttime="20230619 18:52:54.348" endtime="20230619 18:52:54.348"/>
</return>
<msg timestamp="20230619 18:52:54.348" level="INFO">${cov_path} = /w/e2e_tests/results/002_unit_tests.coverage</msg>
<msg timestamp="20230619 18:52:54.348" level="INFO">${cov_filename} = 002_unit_tests.coverage</msg>
<status status="PASS" starttime="20230619 18:52:54.346" endtime="20230619 18:52:54.348"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>go test ./... -v -coverprofile\=${cov_path} -covermode\=set</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:52:54.349" level="INFO">Starting process:
go test ./... -v -coverprofile=/w/e2e_tests/results/002_unit_tests.coverage -covermode=set</msg>
<msg timestamp="20230619 18:52:54.351" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:10.472" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:10.473" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:52:54.348" endtime="20230619 18:54:10.473"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>${result.stdout}</arg>
<arg>${result.stderr}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20230619 18:54:10.475" level="INFO">=== RUN   TestServeHTTP
--- PASS: TestServeHTTP (0.00s)
=== RUN   TestParseCaddyfile
--- PASS: TestParseCaddyfile (0.00s)
PASS
	github.com/madworx/caddy-put-upload	coverage: 73.3% of statements
ok  	github.com/madworx/caddy-put-upload	0.014s	coverage: 73.3% of statements
?   	github.com/madworx/caddy-put-upload/cmd/caddy	[no test files]
?   	github.com/madworx/caddy-put-upload/cmd/gocovmerge	[no test files]
?   	github.com/madworx/caddy-put-upload/e2e_tests/resources	[no test files]</msg>
<msg timestamp="20230619 18:54:10.475" level="INFO">go: downloading github.com/caddyserver/caddy/v2 v2.6.4
go: downloading golang.org/x/tools v0.9.3
go: downloading github.com/stretchr/testify v1.8.1
go: downloading github.com/aryann/difflib v0.0.0-20210328193216-ff5ff6dc229b
go: downloading github.com/caddyserver/certmagic v0.17.2
go: downloading github.com/spf13/cobra v1.6.1
go: downloading github.com/spf13/pflag v1.0.5
go: downloading go.uber.org/zap v1.24.0
go: downloading github.com/google/uuid v1.3.0
go: downloading github.com/prometheus/client_golang v1.14.0
go: downloading github.com/quic-go/quic-go v0.32.0
go: downloading golang.org/x/sys v0.8.0
go: downloading golang.org/x/term v0.8.0
go: downloading github.com/dustin/go-humanize v1.0.1
go: downloading github.com/mholt/acmez v1.1.0
go: downloading github.com/google/cel-go v0.13.0
go: downloading golang.org/x/net v0.10.0
go: downloading google.golang.org/genproto v0.0.0-20230202175211-008b39050e57
go: downloading github.com/davecgh/go-spew v1.1.1
go: downloading github.com/pmezard/go-difflib v1.0.0
go: downloading gopkg.in/yaml.v3 v3.0.1
go: downloading github.com/klauspost/cpuid/v2 v2.2.3
go: downloading github.com/libdns/libdns v0.2.1
go: downloading github.com/miekg/dns v1.1.50
go: downloading golang.org/x/crypto v0.5.0
go: downloading github.com/cpuguy83/go-md2man/v2 v2.0.2
go: downloading go.uber.org/atomic v1.9.0
go: downloading go.uber.org/multierr v1.6.0
go: downloading github.com/smallstep/certificates v0.23.2
go: downloading github.com/smallstep/truststore v0.12.1
go: downloading go.step.sm/crypto v0.23.2
go: downloading github.com/go-chi/chi v4.1.2+incompatible
go: downloading github.com/smallstep/nosql v0.5.0
go: downloading github.com/tailscale/tscert v0.0.0-20230124224810-c6dc1f4049b2
go: downloading gopkg.in/natefinch/lumberjack.v2 v2.2.1
go: downloading github.com/beorn7/perks v1.0.1
go: downloading github.com/cespare/xxhash/v2 v2.1.2
go: downloading github.com/cespare/xxhash v1.1.0
go: downloading github.com/golang/protobuf v1.5.2
go: downloading github.com/prometheus/client_model v0.3.0
go: downloading github.com/prometheus/common v0.37.0
go: downloading github.com/prometheus/procfs v0.8.0
go: downloading google.golang.org/protobuf v1.28.1
go: downloading github.com/quic-go/qpack v0.4.0
go: downloading golang.org/x/text v0.9.0
go: downloading github.com/stoewer/go-strcase v1.2.0
go: downloading github.com/antlr/antlr4/runtime/Go/antlr v1.4.10
go: downloading github.com/russross/blackfriday/v2 v2.1.0
go: downloading golang.org/x/sync v0.2.0
go: downloading github.com/klauspost/compress v1.15.15
go: downloading github.com/Masterminds/sprig/v3 v3.2.3
go: downloading github.com/alecthomas/chroma/v2 v2.5.0
go: downloading github.com/yuin/goldmark v1.5.4
go: downloading github.com/yuin/goldmark-highlighting/v2 v2.0.0-20220924101305-151362477c87
go: downloading go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.39.0
go: downloading go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.4.0
go: downloading go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.4.0
go: downloading go.opentelemetry.io/otel v1.13.0
go: downloading go.opentelemetry.io/otel/sdk v1.13.0
go: downloading github.com/pkg/errors v0.9.1
go: downloading go.step.sm/cli-utils v0.7.5
go: downloading go.step.sm/linkedca v0.19.0
go: downloading google.golang.org/grpc v1.52.3
go: downloading gopkg.in/square/go-jose.v2 v2.6.0
go: downloading github.com/fxamacker/cbor/v2 v2.4.0
go: downloading github.com/slackhq/nebula v1.6.1
go: downloading github.com/matttproud/golang_protobuf_extensions v1.0.1
go: downloading golang.org/x/exp v0.0.0-20221205204356-47842c84f3db
go: downloading github.com/quic-go/qtls-go1-20 v0.1.0
go: downloading github.com/Masterminds/goutils v1.1.1
go: downloading github.com/Masterminds/semver/v3 v3.2.0
go: downloading github.com/huandu/xstrings v1.3.3
go: downloading github.com/imdario/mergo v0.3.12
go: downloading github.com/mitchellh/copystructure v1.2.0
go: downloading github.com/shopspring/decimal v1.2.0
go: downloading github.com/spf13/cast v1.4.1
go: downloading github.com/felixge/httpsnoop v1.0.3
go: downloading go.opentelemetry.io/otel/metric v0.36.0
go: downloading go.opentelemetry.io/otel/trace v1.13.0
go: downloading go.opentelemetry.io/otel/exporters/otlp/internal/retry v1.4.0
go: downloading go.opentelemetry.io/proto/otlp v0.12.0
go: downloading github.com/micromdm/scep/v2 v2.1.0
go: downloading go.mozilla.org/pkcs7 v0.0.0-20210826202110-33d05740a352
go: downloading github.com/urfave/cli v1.22.12
go: downloading github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e
go: downloading github.com/manifoldco/promptui v0.9.0
go: downloading filippo.io/edwards25519 v1.0.0
go: downloading github.com/x448/float16 v0.8.4
go: downloading github.com/rs/xid v1.4.0
go: downloading github.com/sirupsen/logrus v1.9.0
go: downloading github.com/dgraph-io/badger v1.6.2
go: downloading github.com/dgraph-io/badger/v2 v2.2007.4
go: downloading go.etcd.io/bbolt v1.3.6
go: downloading github.com/go-sql-driver/mysql v1.6.0
go: downloading github.com/jackc/pgx/v4 v4.17.2
go: downloading github.com/mitchellh/go-ps v1.0.0
go: downloading github.com/mitchellh/reflectwalk v1.0.2
go: downloading github.com/dlclark/regexp2 v1.7.0
go: downloading github.com/go-logr/logr v1.2.3
go: downloading github.com/grpc-ecosystem/grpc-gateway v1.16.0
go: downloading github.com/go-logr/stdr v1.2.2
go: downloading github.com/go-kit/kit v0.10.0
go: downloading github.com/cenkalti/backoff/v4 v4.1.2
go: downloading github.com/dgraph-io/ristretto v0.1.0
go: downloading github.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13
go: downloading github.com/jackc/pgconn v1.13.0
go: downloading github.com/jackc/pgio v1.0.0
go: downloading github.com/jackc/pgproto3/v2 v2.3.1
go: downloading github.com/jackc/pgtype v1.12.0
go: downloading github.com/go-logfmt/logfmt v0.5.1
go: downloading github.com/AndreasBriese/bbloom v0.0.0-20190825152654-46b345b51c96
go: downloading github.com/golang/snappy v0.0.4
go: downloading github.com/golang/glog v1.0.0
go: downloading github.com/jackc/chunkreader/v2 v2.0.1
go: downloading github.com/jackc/pgpassfile v1.0.0
go: downloading github.com/jackc/pgservicefile v0.0.0-20200714003250-2b9c44734f2b
go: downloading github.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d
go: downloading github.com/shurcooL/sanitized_anchor_name v1.0.0
go: downloading github.com/mattn/go-colorable v0.1.8
go: downloading github.com/mattn/go-isatty v0.0.13</msg>
<status status="PASS" starttime="20230619 18:54:10.473" endtime="20230619 18:54:10.475"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:10.476" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:10.475" endtime="20230619 18:54:10.476"/>
</kw>
<doc>Execute golang unit tests</doc>
<status status="PASS" starttime="20230619 18:52:54.346" endtime="20230619 18:54:10.476"/>
</test>
<test id="s1-s2-t2" name="Failing unit tests should be detected" line="20">
<kw name="Copy File" library="OperatingSystem">
<arg>e2e_tests/resources/test_fail.go</arg>
<arg>fail_test.go</arg>
<doc>Copies the source file into the destination.</doc>
<msg timestamp="20230619 18:54:10.483" level="INFO" html="true">Copied file from '&lt;a href="file:///w/e2e_tests/resources/test_fail.go"&gt;/w/e2e_tests/resources/test_fail.go&lt;/a&gt;' to '&lt;a href="file:///w/fail_test.go"&gt;/w/fail_test.go&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 18:54:10.482" endtime="20230619 18:54:10.483"/>
</kw>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>go test ./... -v</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:10.484" level="INFO">Starting process:
go test ./... -v</msg>
<msg timestamp="20230619 18:54:10.487" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:12.607" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:12.608" level="INFO">${result} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" starttime="20230619 18:54:10.483" endtime="20230619 18:54:12.608"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>${result.stdout}</arg>
<arg>${result.stderr}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20230619 18:54:12.609" level="INFO">?   	github.com/madworx/caddy-put-upload/cmd/caddy	[no test files]
=== RUN   TestFailure
--- FAIL: TestFailure (0.00s)
=== RUN   TestServeHTTP
--- PASS: TestServeHTTP (0.00s)
=== RUN   TestParseCaddyfile
--- PASS: TestParseCaddyfile (0.00s)
FAIL
FAIL	github.com/madworx/caddy-put-upload	0.018s
?   	github.com/madworx/caddy-put-upload/cmd/gocovmerge	[no test files]
?   	github.com/madworx/caddy-put-upload/e2e_tests/resources	[no test files]
FAIL</msg>
<msg timestamp="20230619 18:54:12.610" level="INFO"/>
<status status="PASS" starttime="20230619 18:54:12.608" endtime="20230619 18:54:12.610"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>1</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:12.611" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:12.610" endtime="20230619 18:54:12.611"/>
</kw>
<kw name="Remove File" library="OperatingSystem" type="TEARDOWN">
<arg>fail_test.go</arg>
<doc>Removes a file with the given path.</doc>
<msg timestamp="20230619 18:54:12.611" level="INFO" html="true">Removed file '&lt;a href="file:///w/fail_test.go"&gt;/w/fail_test.go&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 18:54:12.611" endtime="20230619 18:54:12.612"/>
</kw>
<doc>Ensure that we notice if unit tests start to fail</doc>
<status status="PASS" starttime="20230619 18:54:10.481" endtime="20230619 18:54:12.612"/>
</test>
<kw name="Suite Teardown" library="keywords" type="TEARDOWN">
<doc>Generate coverage report and remove coverage directory</doc>
<kw name="Generate Coverage Report" library="keywords">
<doc>Generate coverage report from generated files</doc>
<kw name="Get Coverage Filename From Suite Source" library="keywords">
<var>${cov_path}</var>
<var>${cov_filename}</var>
<doc>Splits `/w/e2e_tests/002_unit_tests.robot` into path and filename. Constructs a
path to the coverage file in `/w/e2e_tests/results`. Returns the coverage full file
path and the coverage filename separately.</doc>
<kw name="Split Path" library="OperatingSystem">
<var>${path}</var>
<var>${suite_filename}</var>
<arg>${SUITE SOURCE}</arg>
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<msg timestamp="20230619 18:54:12.614" level="INFO">${path} = /w/e2e_tests</msg>
<msg timestamp="20230619 18:54:12.614" level="INFO">${suite_filename} = 002_unit_tests.robot</msg>
<status status="PASS" starttime="20230619 18:54:12.614" endtime="20230619 18:54:12.614"/>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<var>${suite_name}</var>
<var>${ext}</var>
<arg>${suite_filename}</arg>
<doc>Splits the extension from the given path.</doc>
<msg timestamp="20230619 18:54:12.615" level="INFO">${suite_name} = 002_unit_tests</msg>
<msg timestamp="20230619 18:54:12.615" level="INFO">${ext} = robot</msg>
<status status="PASS" starttime="20230619 18:54:12.615" endtime="20230619 18:54:12.615"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${cov_path}</var>
<arg>${OUTPUT DIR}</arg>
<arg>${suite_name}.coverage</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20230619 18:54:12.616" level="INFO">${cov_path} = /w/e2e_tests/results/002_unit_tests.coverage</msg>
<status status="PASS" starttime="20230619 18:54:12.616" endtime="20230619 18:54:12.616"/>
</kw>
<return>
<value>${cov_path}</value>
<value>${suite_name}.coverage</value>
<status status="PASS" starttime="20230619 18:54:12.616" endtime="20230619 18:54:12.616"/>
</return>
<msg timestamp="20230619 18:54:12.616" level="INFO">${cov_path} = /w/e2e_tests/results/002_unit_tests.coverage</msg>
<msg timestamp="20230619 18:54:12.616" level="INFO">${cov_filename} = 002_unit_tests.coverage</msg>
<status status="PASS" starttime="20230619 18:54:12.614" endtime="20230619 18:54:12.616"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${dir_exists}</var>
<arg>Directory Should Exist</arg>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Directory Should Exist" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Fails unless the given path points to an existing directory.</doc>
<msg timestamp="20230619 18:54:12.617" level="INFO" html="true">Directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230619 18:54:12.617" endtime="20230619 18:54:12.617"/>
</kw>
<msg timestamp="20230619 18:54:12.617" level="INFO">${dir_exists} = True</msg>
<status status="PASS" starttime="20230619 18:54:12.616" endtime="20230619 18:54:12.617"/>
</kw>
<if>
<branch type="IF" condition="${dir_exists}">
<kw name="List Files In Directory" library="OperatingSystem">
<var>${dir_contents}</var>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Wrapper for `List Directory` that returns only files.</doc>
<msg timestamp="20230619 18:54:12.618" level="INFO" html="true">Listing contents of directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<msg timestamp="20230619 18:54:12.618" level="INFO">0 files:
</msg>
<msg timestamp="20230619 18:54:12.618" level="INFO">${dir_contents} = []</msg>
<status status="PASS" starttime="20230619 18:54:12.617" endtime="20230619 18:54:12.618"/>
</kw>
<status status="PASS" starttime="20230619 18:54:12.617" endtime="20230619 18:54:12.618"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${dir_contents}</var>
<arg>${None}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230619 18:54:12.618" endtime="20230619 18:54:12.618"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:54:12.618" endtime="20230619 18:54:12.618"/>
</branch>
<status status="PASS" starttime="20230619 18:54:12.617" endtime="20230619 18:54:12.618"/>
</if>
<if>
<branch type="IF" condition="${dir_contents}">
<kw name="Convert Coverage Fragments" library="keywords">
<arg>${cov_path}</arg>
<doc>Convert coverage fragments (from a go run/build -cover execution) into
a single file</doc>
<status status="NOT RUN" starttime="20230619 18:54:12.619" endtime="20230619 18:54:12.619"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:54:12.618" endtime="20230619 18:54:12.619"/>
</branch>
<status status="PASS" starttime="20230619 18:54:12.618" endtime="20230619 18:54:12.619"/>
</if>
<kw name="Expect Successful Execution" library="keywords">
<arg>go tool cover -html\=${cov_path} -o\=${cov_path}.html</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:12.621" level="INFO">Starting process:
go tool cover -html=/w/e2e_tests/results/002_unit_tests.coverage -o=/w/e2e_tests/results/002_unit_tests.coverage.html</msg>
<msg timestamp="20230619 18:54:12.623" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:13.007" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:13.008" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:12.621" endtime="20230619 18:54:13.008"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:54:13.009" endtime="20230619 18:54:13.009"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:54:13.008" endtime="20230619 18:54:13.009"/>
</branch>
<status status="PASS" starttime="20230619 18:54:13.008" endtime="20230619 18:54:13.010"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:13.011" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:13.010" endtime="20230619 18:54:13.011"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:54:13.011" endtime="20230619 18:54:13.011"/>
</return>
<status status="PASS" starttime="20230619 18:54:12.620" endtime="20230619 18:54:13.011"/>
</kw>
<kw name="Expect Successful Execution" library="keywords">
<var>${result}</var>
<arg>go tool cover -func\=${cov_path}</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:13.014" level="INFO">Starting process:
go tool cover -func=/w/e2e_tests/results/002_unit_tests.coverage</msg>
<msg timestamp="20230619 18:54:13.017" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:13.406" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:13.406" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:13.014" endtime="20230619 18:54:13.406"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:54:13.408" endtime="20230619 18:54:13.408"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:54:13.407" endtime="20230619 18:54:13.408"/>
</branch>
<status status="PASS" starttime="20230619 18:54:13.407" endtime="20230619 18:54:13.408"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:13.409" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:13.409" endtime="20230619 18:54:13.409"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:54:13.410" endtime="20230619 18:54:13.410"/>
</return>
<msg timestamp="20230619 18:54:13.410" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:13.013" endtime="20230619 18:54:13.410"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${percent}</var>
<arg>${result.stdout}</arg>
<arg>total:.*?([0-9.]+%)$</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20230619 18:54:13.411" level="INFO">${percent} = ['73.3%']</msg>
<status status="PASS" starttime="20230619 18:54:13.410" endtime="20230619 18:54:13.411"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>Code coverage</arg>
<arg>${percent[0]} [${cov_filename}.html|HTML Report] | [${cov_filename}|Coverage file]</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20230619 18:54:13.412" level="INFO">Set suite metadata 'Code coverage' to value '73.3% [002_unit_tests.coverage.html|HTML Report] | [002_unit_tests.coverage|Coverage file]'.</msg>
<status status="PASS" starttime="20230619 18:54:13.411" endtime="20230619 18:54:13.412"/>
</kw>
<status status="PASS" starttime="20230619 18:54:12.613" endtime="20230619 18:54:13.412"/>
</kw>
<kw name="Remove Directory" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<arg>recursive=True</arg>
<doc>Removes the directory pointed to by the given ``path``.</doc>
<msg timestamp="20230619 18:54:13.413" level="INFO" html="true">Removed directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 18:54:13.412" endtime="20230619 18:54:13.413"/>
</kw>
<status status="PASS" starttime="20230619 18:54:12.613" endtime="20230619 18:54:13.413"/>
</kw>
<doc>Run native unit tests for the golang code and serves to aggregate
all test results into one report, also generating a coverage report.</doc>
<meta name="Code coverage">73.3% [002_unit_tests.coverage.html|HTML Report] | [002_unit_tests.coverage|Coverage file]</meta>
<status status="PASS" starttime="20230619 18:52:54.339" endtime="20230619 18:54:13.414"/>
</suite>
<suite id="s1-s3" name="003 Configuration" source="/w/e2e_tests/003_configuration.robot">
<kw name="Suite Setup" library="keywords" type="SETUP">
<doc>Ensure there is a directory for coverage files</doc>
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20230619 18:54:13.422" level="INFO" html="true">Created directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 18:54:13.421" endtime="20230619 18:54:13.422"/>
</kw>
<status status="PASS" starttime="20230619 18:54:13.421" endtime="20230619 18:54:13.422"/>
</kw>
<test id="s1-s3-t1" name="Example configuration: basic authentication" line="14">
<kw name="Validate Configuration" library="keywords">
<arg>examples/Caddyfile.basic-auth</arg>
<arg>0</arg>
<doc>Validate if configuration behaves as expected</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${CADDY_VALIDATE} ${file_name}</arg>
<arg>shell=True</arg>
<arg>env:GOCOVERDIR=${OUTPUT DIR}/go-coverage</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:13.424" level="INFO">Starting process:
go run -cover cmd/caddy/main.go validate --config examples/Caddyfile.basic-auth</msg>
<msg timestamp="20230619 18:54:13.427" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:15.726" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:15.727" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:13.424" endtime="20230619 18:54:15.727"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:15.730" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:15.728" endtime="20230619 18:54:15.730"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${expected_response}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230619 18:54:15.730" endtime="20230619 18:54:15.732"/>
</kw>
<status status="PASS" starttime="20230619 18:54:13.423" endtime="20230619 18:54:15.732"/>
</kw>
<doc>Test that example configuration with HTTP basic authentication is accepted</doc>
<status status="PASS" starttime="20230619 18:54:13.422" endtime="20230619 18:54:15.733"/>
</test>
<test id="s1-s3-t2" name="Example configuration: no authentication" line="18">
<kw name="Validate Configuration" library="keywords">
<arg>examples/Caddyfile.no-authentication</arg>
<arg>0</arg>
<doc>Validate if configuration behaves as expected</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${CADDY_VALIDATE} ${file_name}</arg>
<arg>shell=True</arg>
<arg>env:GOCOVERDIR=${OUTPUT DIR}/go-coverage</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:15.736" level="INFO">Starting process:
go run -cover cmd/caddy/main.go validate --config examples/Caddyfile.no-authentication</msg>
<msg timestamp="20230619 18:54:15.739" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:17.913" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:17.914" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:15.735" endtime="20230619 18:54:17.914"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:17.916" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:17.914" endtime="20230619 18:54:17.916"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${expected_response}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230619 18:54:17.916" endtime="20230619 18:54:17.917"/>
</kw>
<status status="PASS" starttime="20230619 18:54:15.734" endtime="20230619 18:54:17.917"/>
</kw>
<doc>Test that example configuration without authentication is accepted</doc>
<status status="PASS" starttime="20230619 18:54:15.734" endtime="20230619 18:54:17.917"/>
</test>
<test id="s1-s3-t3" name="Invalid configuration: empty" line="22">
<kw name="Validate Configuration" library="keywords">
<arg>e2e_tests/resources/Caddyfile.invalid-no-arg</arg>
<arg>1</arg>
<arg>Wrong argument count or unexpected line ending after 'http_put_file'</arg>
<doc>Validate if configuration behaves as expected</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${CADDY_VALIDATE} ${file_name}</arg>
<arg>shell=True</arg>
<arg>env:GOCOVERDIR=${OUTPUT DIR}/go-coverage</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:17.919" level="INFO">Starting process:
go run -cover cmd/caddy/main.go validate --config e2e_tests/resources/Caddyfile.invalid-no-arg</msg>
<msg timestamp="20230619 18:54:17.922" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:19.999" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:20.000" level="INFO">${result} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" starttime="20230619 18:54:17.919" endtime="20230619 18:54:20.000"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:20.001" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:20.000" endtime="20230619 18:54:20.001"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${expected_response}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230619 18:54:20.002" endtime="20230619 18:54:20.002"/>
</kw>
<status status="PASS" starttime="20230619 18:54:17.918" endtime="20230619 18:54:20.002"/>
</kw>
<doc>Test that an invalid configuration is rejected (no arguments)</doc>
<status status="PASS" starttime="20230619 18:54:17.918" endtime="20230619 18:54:20.002"/>
</test>
<test id="s1-s3-t4" name="Invalid configuration: structure" line="28">
<kw name="Validate Configuration" library="keywords">
<arg>e2e_tests/resources/Caddyfile.invalid-nested-args</arg>
<arg>1</arg>
<arg>Wrong argument count or unexpected line ending after 'http_put_file'</arg>
<doc>Validate if configuration behaves as expected</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${CADDY_VALIDATE} ${file_name}</arg>
<arg>shell=True</arg>
<arg>env:GOCOVERDIR=${OUTPUT DIR}/go-coverage</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:20.004" level="INFO">Starting process:
go run -cover cmd/caddy/main.go validate --config e2e_tests/resources/Caddyfile.invalid-nested-args</msg>
<msg timestamp="20230619 18:54:20.007" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:22.183" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:22.183" level="INFO">${result} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" starttime="20230619 18:54:20.004" endtime="20230619 18:54:22.184"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:22.185" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:22.184" endtime="20230619 18:54:22.186"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${expected_response}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230619 18:54:22.186" endtime="20230619 18:54:22.186"/>
</kw>
<status status="PASS" starttime="20230619 18:54:20.004" endtime="20230619 18:54:22.186"/>
</kw>
<doc>Test that an invalid configuration is rejected (nested argument)</doc>
<status status="PASS" starttime="20230619 18:54:20.003" endtime="20230619 18:54:22.187"/>
</test>
<kw name="Suite Teardown" library="keywords" type="TEARDOWN">
<doc>Generate coverage report and remove coverage directory</doc>
<kw name="Generate Coverage Report" library="keywords">
<doc>Generate coverage report from generated files</doc>
<kw name="Get Coverage Filename From Suite Source" library="keywords">
<var>${cov_path}</var>
<var>${cov_filename}</var>
<doc>Splits `/w/e2e_tests/003_configuration.robot` into path and filename. Constructs a
path to the coverage file in `/w/e2e_tests/results`. Returns the coverage full file
path and the coverage filename separately.</doc>
<kw name="Split Path" library="OperatingSystem">
<var>${path}</var>
<var>${suite_filename}</var>
<arg>${SUITE SOURCE}</arg>
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<msg timestamp="20230619 18:54:22.190" level="INFO">${path} = /w/e2e_tests</msg>
<msg timestamp="20230619 18:54:22.190" level="INFO">${suite_filename} = 003_configuration.robot</msg>
<status status="PASS" starttime="20230619 18:54:22.189" endtime="20230619 18:54:22.190"/>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<var>${suite_name}</var>
<var>${ext}</var>
<arg>${suite_filename}</arg>
<doc>Splits the extension from the given path.</doc>
<msg timestamp="20230619 18:54:22.191" level="INFO">${suite_name} = 003_configuration</msg>
<msg timestamp="20230619 18:54:22.191" level="INFO">${ext} = robot</msg>
<status status="PASS" starttime="20230619 18:54:22.190" endtime="20230619 18:54:22.191"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${cov_path}</var>
<arg>${OUTPUT DIR}</arg>
<arg>${suite_name}.coverage</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20230619 18:54:22.191" level="INFO">${cov_path} = /w/e2e_tests/results/003_configuration.coverage</msg>
<status status="PASS" starttime="20230619 18:54:22.191" endtime="20230619 18:54:22.192"/>
</kw>
<return>
<value>${cov_path}</value>
<value>${suite_name}.coverage</value>
<status status="PASS" starttime="20230619 18:54:22.192" endtime="20230619 18:54:22.192"/>
</return>
<msg timestamp="20230619 18:54:22.192" level="INFO">${cov_path} = /w/e2e_tests/results/003_configuration.coverage</msg>
<msg timestamp="20230619 18:54:22.192" level="INFO">${cov_filename} = 003_configuration.coverage</msg>
<status status="PASS" starttime="20230619 18:54:22.189" endtime="20230619 18:54:22.192"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${dir_exists}</var>
<arg>Directory Should Exist</arg>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Directory Should Exist" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Fails unless the given path points to an existing directory.</doc>
<msg timestamp="20230619 18:54:22.193" level="INFO" html="true">Directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230619 18:54:22.193" endtime="20230619 18:54:22.193"/>
</kw>
<msg timestamp="20230619 18:54:22.193" level="INFO">${dir_exists} = True</msg>
<status status="PASS" starttime="20230619 18:54:22.192" endtime="20230619 18:54:22.193"/>
</kw>
<if>
<branch type="IF" condition="${dir_exists}">
<kw name="List Files In Directory" library="OperatingSystem">
<var>${dir_contents}</var>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Wrapper for `List Directory` that returns only files.</doc>
<msg timestamp="20230619 18:54:22.194" level="INFO" html="true">Listing contents of directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<msg timestamp="20230619 18:54:22.195" level="INFO">5 files:
covcounters.6b007adb3d230b7f717346764648bf5a.7990.1687200855710200991
covcounters.6b007adb3d230b7f717346764648bf5a.8043.1687200857903186262
covcounters.6b007adb3d230b7f717346764648bf5a.8092.1687200859989360699
covcounters.6b007adb3d230b7f717346764648bf5a.8144.1687200862171556545
covmeta.6b007adb3d230b7f717346764648bf5a</msg>
<msg timestamp="20230619 18:54:22.195" level="INFO">${dir_contents} = ['covcounters.6b007adb3d230b7f717346764648bf5a.7990.1687200855710200991', 'covcounters.6b007adb3d230b7f717346764648bf5a.8043.1687200857903186262', 'covcounters.6b007adb3d230b7f717346764648bf5a.8092.16...</msg>
<status status="PASS" starttime="20230619 18:54:22.194" endtime="20230619 18:54:22.195"/>
</kw>
<status status="PASS" starttime="20230619 18:54:22.194" endtime="20230619 18:54:22.195"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${dir_contents}</var>
<arg>${None}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230619 18:54:22.195" endtime="20230619 18:54:22.195"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:54:22.195" endtime="20230619 18:54:22.195"/>
</branch>
<status status="PASS" starttime="20230619 18:54:22.194" endtime="20230619 18:54:22.195"/>
</if>
<if>
<branch type="IF" condition="${dir_contents}">
<kw name="Convert Coverage Fragments" library="keywords">
<arg>${cov_path}</arg>
<doc>Convert coverage fragments (from a go run/build -cover execution) into
a single file</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>go tool covdata textfmt -i\=${OUTPUT DIR}/go-coverage -o\=${cov_path}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:22.197" level="INFO">Starting process:
go tool covdata textfmt -i=/w/e2e_tests/results/go-coverage -o=/w/e2e_tests/results/003_configuration.coverage</msg>
<msg timestamp="20230619 18:54:22.202" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:22.210" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:22.210" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:22.196" endtime="20230619 18:54:22.210"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:22.211" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:22.210" endtime="20230619 18:54:22.211"/>
</kw>
<status status="PASS" starttime="20230619 18:54:22.196" endtime="20230619 18:54:22.212"/>
</kw>
<status status="PASS" starttime="20230619 18:54:22.195" endtime="20230619 18:54:22.212"/>
</branch>
<status status="PASS" starttime="20230619 18:54:22.195" endtime="20230619 18:54:22.212"/>
</if>
<kw name="Expect Successful Execution" library="keywords">
<arg>go tool cover -html\=${cov_path} -o\=${cov_path}.html</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:22.214" level="INFO">Starting process:
go tool cover -html=/w/e2e_tests/results/003_configuration.coverage -o=/w/e2e_tests/results/003_configuration.coverage.html</msg>
<msg timestamp="20230619 18:54:22.216" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:22.624" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:22.625" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:22.213" endtime="20230619 18:54:22.625"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:54:22.626" endtime="20230619 18:54:22.626"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:54:22.625" endtime="20230619 18:54:22.626"/>
</branch>
<status status="PASS" starttime="20230619 18:54:22.625" endtime="20230619 18:54:22.626"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:22.627" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:22.627" endtime="20230619 18:54:22.628"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:54:22.628" endtime="20230619 18:54:22.628"/>
</return>
<status status="PASS" starttime="20230619 18:54:22.213" endtime="20230619 18:54:22.628"/>
</kw>
<kw name="Expect Successful Execution" library="keywords">
<var>${result}</var>
<arg>go tool cover -func\=${cov_path}</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:22.631" level="INFO">Starting process:
go tool cover -func=/w/e2e_tests/results/003_configuration.coverage</msg>
<msg timestamp="20230619 18:54:22.634" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:23.015" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:23.016" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:22.631" endtime="20230619 18:54:23.016"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:54:23.017" endtime="20230619 18:54:23.017"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:54:23.016" endtime="20230619 18:54:23.017"/>
</branch>
<status status="PASS" starttime="20230619 18:54:23.016" endtime="20230619 18:54:23.017"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:23.018" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:23.017" endtime="20230619 18:54:23.018"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:54:23.018" endtime="20230619 18:54:23.019"/>
</return>
<msg timestamp="20230619 18:54:23.019" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:22.630" endtime="20230619 18:54:23.019"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${percent}</var>
<arg>${result.stdout}</arg>
<arg>total:.*?([0-9.]+%)$</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20230619 18:54:23.020" level="INFO">${percent} = ['37.0%']</msg>
<status status="PASS" starttime="20230619 18:54:23.019" endtime="20230619 18:54:23.020"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>Code coverage</arg>
<arg>${percent[0]} [${cov_filename}.html|HTML Report] | [${cov_filename}|Coverage file]</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20230619 18:54:23.021" level="INFO">Set suite metadata 'Code coverage' to value '37.0% [003_configuration.coverage.html|HTML Report] | [003_configuration.coverage|Coverage file]'.</msg>
<status status="PASS" starttime="20230619 18:54:23.020" endtime="20230619 18:54:23.021"/>
</kw>
<status status="PASS" starttime="20230619 18:54:22.188" endtime="20230619 18:54:23.021"/>
</kw>
<kw name="Remove Directory" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<arg>recursive=True</arg>
<doc>Removes the directory pointed to by the given ``path``.</doc>
<msg timestamp="20230619 18:54:23.022" level="INFO" html="true">Removed directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 18:54:23.021" endtime="20230619 18:54:23.022"/>
</kw>
<status status="PASS" starttime="20230619 18:54:22.188" endtime="20230619 18:54:23.022"/>
</kw>
<doc>A series of test cases designed to verify the behavior of various
configurations, ranging from valid to invalid scenarios.
It utilizes keywords and resources defined in the
'resources/keywords.robot' file for test execution.</doc>
<meta name="Code coverage">37.0% [003_configuration.coverage.html|HTML Report] | [003_configuration.coverage|Coverage file]</meta>
<status status="PASS" starttime="20230619 18:54:13.415" endtime="20230619 18:54:23.022"/>
</suite>
<suite id="s1-s4" name="004 Requests" source="/w/e2e_tests/004_requests.robot">
<kw name="Suite Setup With Caddy" library="keywords" type="SETUP">
<doc>Run regular suite setup, start Caddy and wait until it is available</doc>
<kw name="Suite Setup" library="keywords">
<doc>Ensure there is a directory for coverage files</doc>
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20230619 18:54:23.031" level="INFO" html="true">Created directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 18:54:23.031" endtime="20230619 18:54:23.031"/>
</kw>
<status status="PASS" starttime="20230619 18:54:23.031" endtime="20230619 18:54:23.031"/>
</kw>
<kw name="Expect Caddy Not Ready" library="keywords">
<doc>Check that Caddy is not ready to accept connections</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${result}</var>
<arg>GET</arg>
<arg>${BASE_URL}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 18:54:23.036" level="FAIL">ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f2f48a56e80&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))</msg>
<status status="FAIL" starttime="20230619 18:54:23.032" endtime="20230619 18:54:23.071"/>
</kw>
<msg timestamp="20230619 18:54:23.071" level="INFO">${result} = False</msg>
<status status="PASS" starttime="20230619 18:54:23.032" endtime="20230619 18:54:23.071"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>${False}</arg>
<arg>msg=Caddy seems to be running already, which is unexpected in this test context.</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20230619 18:54:23.071" endtime="20230619 18:54:23.072"/>
</kw>
<status status="PASS" starttime="20230619 18:54:23.031" endtime="20230619 18:54:23.072"/>
</kw>
<kw name="Start Process" library="Process">
<arg>${CADDY_RUN} examples/Caddyfile.basic-auth</arg>
<arg>shell=True</arg>
<arg>env:GOCOVERDIR=${OUTPUT DIR}/go-coverage</arg>
<arg>alias=caddy</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20230619 18:54:23.072" level="INFO">Starting process:
go run -cover cmd/caddy/main.go run --config examples/Caddyfile.basic-auth</msg>
<status status="PASS" starttime="20230619 18:54:23.072" endtime="20230619 18:54:23.076"/>
</kw>
<kw name="Wait Until Caddy Is Ready" library="keywords">
<doc>Return only when Caddy is ready to accept connections</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>30s</arg>
<arg>0.5s</arg>
<arg>GET</arg>
<arg>${BASE_URL}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 18:54:23.080" level="FAIL">ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f2f48a74b80&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))</msg>
<status status="FAIL" starttime="20230619 18:54:23.078" endtime="20230619 18:54:23.081"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 18:54:23.583" level="FAIL">ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f2f48a01d90&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))</msg>
<status status="FAIL" starttime="20230619 18:54:23.581" endtime="20230619 18:54:23.584"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 18:54:24.087" level="FAIL">ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f2f48a016a0&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))</msg>
<status status="FAIL" starttime="20230619 18:54:24.084" endtime="20230619 18:54:24.087"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 18:54:24.590" level="FAIL">ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f2f48a74820&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))</msg>
<status status="FAIL" starttime="20230619 18:54:24.588" endtime="20230619 18:54:24.590"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 18:54:25.093" level="FAIL">ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f2f4898c9d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))</msg>
<status status="FAIL" starttime="20230619 18:54:25.091" endtime="20230619 18:54:25.093"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 18:54:26.747" level="INFO">GET Request : url=http://Bob:hiccup@localhost:8080/ 
 path_url=/ 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Basic Qm9iOmhpY2N1cA=='} 
 body=None 
 </msg>
<msg timestamp="20230619 18:54:26.747" level="INFO">GET Response : url=http://Bob:hiccup@localhost:8080/ 
 status=200, reason=OK 
 headers={'Server': 'Caddy', 'Date': 'Mon, 19 Jun 2023 18:54:26 GMT', 'Content-Length': '0'} 
 body=None 
 </msg>
<status status="PASS" starttime="20230619 18:54:25.594" endtime="20230619 18:54:26.747"/>
</kw>
<status status="PASS" starttime="20230619 18:54:23.077" endtime="20230619 18:54:26.748"/>
</kw>
<status status="PASS" starttime="20230619 18:54:23.077" endtime="20230619 18:54:26.748"/>
</kw>
<status status="PASS" starttime="20230619 18:54:23.030" endtime="20230619 18:54:26.748"/>
</kw>
<test id="s1-s4-t1" name="Test simple upload" line="12">
<kw name="Upload File" library="keywords">
<arg>go.mod</arg>
<doc>Test uploading a single file. The go.mod argument should
be the absolute path to the file.</doc>
<kw name="Get Binary File" library="OperatingSystem">
<var>${file_data}</var>
<arg>${file_path}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20230619 18:54:26.750" level="INFO" html="true">Getting file '&lt;a href="file:///w/go.mod"&gt;/w/go.mod&lt;/a&gt;'.</msg>
<msg timestamp="20230619 18:54:26.750" level="INFO">${file_data} = module github.com/madworx/caddy-put-upload

go 1.19

require (
	github.com/caddyserver/caddy/v2 v2.6.4
	github.com/stretchr/testify v1.8.1
)

require (
	github.com/kr/text v0.2.0 // indirect
	github.c...</msg>
<status status="PASS" starttime="20230619 18:54:26.749" endtime="20230619 18:54:26.750"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${file_name}</var>
<arg>/upload/test.txt</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230619 18:54:26.750" level="INFO">${file_name} = /upload/test.txt</msg>
<status status="PASS" starttime="20230619 18:54:26.750" endtime="20230619 18:54:26.750"/>
</kw>
<kw name="PUT" library="RequestsLibrary">
<var>${response}</var>
<arg>${url}${file_name}</arg>
<arg>data=${file_data}</arg>
<arg>expected_status=${expected_status}</arg>
<doc>Sends a PUT request.</doc>
<msg timestamp="20230619 18:54:26.753" level="INFO">PUT Request : url=http://Bob:hiccup@localhost:8080//upload/test.txt 
 path_url=//upload/test.txt 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '6839', 'Authorization': 'Basic Qm9iOmhpY2N1cA=='} 
 body=b'module github.com/madworx/caddy-put-upload\n\ngo 1.19\n\nrequire (\n\tgithub.com/caddyserver/caddy/v2 v2.6.4\n\tgithub.com/stretchr/testify v1.8.1\n)\n\nrequire (\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/rogpeppe/go-internal v1.10.0 // indirect\n)\n\nrequire (\n\tfilippo.io/edwards25519 v1.0.0 // indirect\n\tgithub.com/AndreasBriese/bbloom v0.0.0-20190825152654-46b345b51c96 // indirect\n\tgithub.com/BurntSushi/toml v1.2.1 // indirect\n\tgithub.com/Masterminds/goutils v1.1.1 // indirect\n\tgithub.com/Masterminds/semver/v3 v3.2.0 // indirect\n\tgithub.com/Masterminds/sprig/v3 v3.2.3 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.0 // indirect\n\tgithub.com/alecthomas/chroma/v2 v2.5.0 // indirect\n\tgithub.com/antlr/antlr4/runtime/Go/antlr v1.4.10 // indirect\n\tgithub.com/aryann/difflib v0.0.0-20210328193216-ff5ff6dc229b // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/caddyserver/certmagic v0.17.2 // indirect\n\tgithub.com/cenkalti/backoff/v4 v4.1.2 // indirect\n\tgithub.com/cespare/xxhash v1.1.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.1.2 // indirect\n\tgithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.2 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/dgraph-io/badger v1.6.2 // indirect\n\tgithub.com/dgraph-io/badger/v2 v2.2007.4 // indirect\n\tgithub.com/dgraph-io/ristretto v0.1.0 // indirect\n\tgithub.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13 // indirect\n\tgithub.com/dlclark/regexp2 v1.7.0 // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.3 // indirect\n\tgithub.com/fxamacker/cbor/v2 v2.4.0 // indirect\n\tgithub.com/go-chi/chi v4.1.2+incompatible // indirect\n\tgithub.com/go-kit/kit v0.10.0 // indirect\n\tgithub.com/go-logfmt/logfmt v0.5.1 // indirect\n\tgithub.com/go-logr/logr v1.2.3 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-sql-driver/mysql v1.6.0 // indirect\n\tgithub.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0 // indirect\n\tgithub.com/golang/glog v1.0.0 // indirect\n\tgithub.com/golang/mock v1.6.0 // indirect\n\tgithub.com/golang/protobuf v1.5.2 // indirect\n\tgithub.com/golang/snappy v0.0.4 // indirect\n\tgithub.com/google/cel-go v0.13.0 // indirect\n\tgithub.com/google/pprof v0.0.0-20210407192527-94a9f03dee38 // indirect\n\tgithub.com/google/uuid v1.3.0 // indirect\n\tgithub.com/grpc-ecosystem/grpc-gateway v1.16.0 // indirect\n\tgithub.com/huandu/xstrings v1.3.3 // indirect\n\tgithub.com/imdario/mergo v0.3.12 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.0.1 // indirect\n\tgithub.com/jackc/chunkreader/v2 v2.0.1 // indirect\n\tgithub.com/jackc/pgconn v1.13.0 // indirect\n\tgithub.com/jackc/pgio v1.0.0 // indirect\n\tgithub.com/jackc/pgpassfile v1.0.0 // indirect\n\tgithub.com/jackc/pgproto3/v2 v2.3.1 // indirect\n\tgithub.com/jackc/pgservicefile v0.0.0-20200714003250-2b9c44734f2b // indirect\n\tgithub.com/jackc/pgtype v1.12.0 // indirect\n\tgithub.com/jackc/pgx/v4 v4.17.2 // indirect\n\tgithub.com/klauspost/compress v1.15.15 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.3 // indirect\n\tgithub.com/libdns/libdns v0.2.1 // indirect\n\tgithub.com/manifoldco/promptui v0.9.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.8 // indirect\n\tgithub.com/mattn/go-isatty v0.0.13 // indirect\n\tgithub.com/matttproud/golang_protobuf_extensions v1.0.1 // indirect\n\tgithub.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d // indirect\n\tgithub.com/mholt/acmez v1.1.0 // indirect\n\tgithub.com/micromdm/scep/v2 v2.1.0 // indirect\n\tgithub.com/miekg/dns v1.1.50 // indirect\n\tgithub.com/mitchellh/copystructure v1.2.0 // indirect\n\tgithub.com/mitchellh/go-ps v1.0.0 // indirect\n\tgithub.com/mitchellh/reflectwalk v1.0.2 // indirect\n\tgithub.com/onsi/ginkgo/v2 v2.2.0 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/prometheus/client_golang v1.14.0 // indirect\n\tgithub.com/prometheus/client_model v0.3.0 // indirect\n\tgithub.com/prometheus/common v0.37.0 // indirect\n\tgithub.com/prometheus/procfs v0.8.0 // indirect\n\tgithub.com/quic-go/qpack v0.4.0 // indirect\n\tgithub.com/quic-go/qtls-go1-18 v0.2.0 // indirect\n\tgithub.com/quic-go/qtls-go1-19 v0.2.0 // indirect\n\tgithub.com/quic-go/qtls-go1-20 v0.1.0 // indirect\n\tgithub.com/quic-go/quic-go v0.32.0 // indirect\n\tgithub.com/rs/xid v1.4.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/shopspring/decimal v1.2.0 // indirect\n\tgithub.com/shurcooL/sanitized_anchor_name v1.0.0 // indirect\n\tgithub.com/sirupsen/logrus v1.9.0 // indirect\n\tgithub.com/slackhq/nebula v1.6.1 // indirect\n\tgithub.com/smallstep/certificates v0.23.2 // indirect\n\tgithub.com/smallstep/nosql v0.5.0 // indirect\n\tgithub.com/smallstep/truststore v0.12.1 // indirect\n\tgithub.com/spf13/cast v1.4.1 // indirect\n\tgithub.com/spf13/cobra v1.6.1 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/stoewer/go-strcase v1.2.0 // indirect\n\tgithub.com/tailscale/tscert v0.0.0-20230124224810-c6dc1f4049b2 // indirect\n\tgithub.com/urfave/cli v1.22.12 // indirect\n\tgithub.com/x448/float16 v0.8.4 // indirect\n\tgithub.com/yuin/goldmark v1.5.4 // indirect\n\tgithub.com/yuin/goldmark-highlighting/v2 v2.0.0-20220924101305-151362477c87 // indirect\n\tgo.etcd.io/bbolt v1.3.6 // indirect\n\tgo.mozilla.org/pkcs7 v0.0.0-20210826202110-33d05740a352 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.39.0 // indirect\n\tgo.opentelemetry.io/otel v1.13.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/internal/retry v1.4.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.4.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.4.0 // indirect\n\tgo.opentelemetry.io/otel/metric v0.36.0 // indirect\n\tgo.opentelemetry.io/otel/sdk v1.13.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.13.0 // indirect\n\tgo.opentelemetry.io/proto/otlp v0.12.0 // indirect\n\tgo.step.sm/cli-utils v0.7.5 // indirect\n\tgo.step.sm/crypto v0.23.2 // indirect\n\tgo.step.sm/linkedca v0.19.0 // indirect\n\tgo.uber.org/atomic v1.9.0 // indirect\n\tgo.uber.org/multierr v1.6.0 // indirect\n\tgo.uber.org/zap v1.24.0 // indirect\n\tgolang.org/x/crypto v0.5.0 // indirect\n\tgolang.org/x/exp v0.0.0-20221205204356-47842c84f3db // indirect\n\tgolang.org/x/mod v0.10.0 // indirect\n\tgolang.org/x/net v0.10.0 // indirect\n\tgolang.org/x/sync v0.2.0 // indirect\n\tgolang.org/x/sys v0.8.0 // indirect\n\tgolang.org/x/term v0.8.0 // indirect\n\tgolang.org/x/text v0.9.0 // indirect\n\tgolang.org/x/tools v0.9.3\n\tgoogle.golang.org/genproto v0.0.0-20230202175211-008b39050e57 // indirect\n\tgoogle.golang.org/grpc v1.52.3 // indirect\n\tgoogle.golang.org/protobuf v1.28.1 // indirect\n\tgopkg.in/natefinch/lumberjack.v2 v2.2.1 // indirect\n\tgopkg.in/square/go-jose.v2 v2.6.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\thowett.net/plist v1.0.0 // indirect\n)\n' 
 </msg>
<msg timestamp="20230619 18:54:26.754" level="INFO">PUT Response : url=http://Bob:hiccup@localhost:8080//upload/test.txt 
 status=201, reason=Created 
 headers={'Server': 'Caddy', 'Date': 'Mon, 19 Jun 2023 18:54:26 GMT', 'Content-Length': '44', 'Content-Type': 'text/plain; charset=utf-8'} 
 body=File /upload/test.txt created successfully.
 
 </msg>
<msg timestamp="20230619 18:54:26.754" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230619 18:54:26.750" endtime="20230619 18:54:26.754"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230619 18:54:26.754" level="INFO">&lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230619 18:54:26.754" endtime="20230619 18:54:26.754"/>
</kw>
<if>
<branch type="IF" condition="${text_expected} == True">
<kw name="Should Match" library="BuiltIn">
<arg>${response.text}</arg>
<arg>File ${file_name} created successfully.\n</arg>
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<status status="PASS" starttime="20230619 18:54:26.755" endtime="20230619 18:54:26.756"/>
</kw>
<status status="PASS" starttime="20230619 18:54:26.754" endtime="20230619 18:54:26.756"/>
</branch>
<status status="PASS" starttime="20230619 18:54:26.754" endtime="20230619 18:54:26.756"/>
</if>
<status status="PASS" starttime="20230619 18:54:26.749" endtime="20230619 18:54:26.756"/>
</kw>
<doc>Simple uploads of a file should work</doc>
<status status="PASS" starttime="20230619 18:54:26.748" endtime="20230619 18:54:26.756"/>
</test>
<test id="s1-s4-t2" name="Unauthenticated upload should fail" line="16">
<kw name="Upload File" library="keywords">
<arg>go.mod</arg>
<arg>http://localhost:8080/</arg>
<arg>expected_status=401</arg>
<arg>text_expected=False</arg>
<doc>Test uploading a single file. The go.mod argument should
be the absolute path to the file.</doc>
<kw name="Get Binary File" library="OperatingSystem">
<var>${file_data}</var>
<arg>${file_path}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20230619 18:54:26.758" level="INFO" html="true">Getting file '&lt;a href="file:///w/go.mod"&gt;/w/go.mod&lt;/a&gt;'.</msg>
<msg timestamp="20230619 18:54:26.758" level="INFO">${file_data} = module github.com/madworx/caddy-put-upload

go 1.19

require (
	github.com/caddyserver/caddy/v2 v2.6.4
	github.com/stretchr/testify v1.8.1
)

require (
	github.com/kr/text v0.2.0 // indirect
	github.c...</msg>
<status status="PASS" starttime="20230619 18:54:26.758" endtime="20230619 18:54:26.758"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${file_name}</var>
<arg>/upload/test.txt</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230619 18:54:26.759" level="INFO">${file_name} = /upload/test.txt</msg>
<status status="PASS" starttime="20230619 18:54:26.758" endtime="20230619 18:54:26.759"/>
</kw>
<kw name="PUT" library="RequestsLibrary">
<var>${response}</var>
<arg>${url}${file_name}</arg>
<arg>data=${file_data}</arg>
<arg>expected_status=${expected_status}</arg>
<doc>Sends a PUT request.</doc>
<msg timestamp="20230619 18:54:26.761" level="INFO">PUT Request : url=http://localhost:8080//upload/test.txt 
 path_url=//upload/test.txt 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '6839'} 
 body=b'module github.com/madworx/caddy-put-upload\n\ngo 1.19\n\nrequire (\n\tgithub.com/caddyserver/caddy/v2 v2.6.4\n\tgithub.com/stretchr/testify v1.8.1\n)\n\nrequire (\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/rogpeppe/go-internal v1.10.0 // indirect\n)\n\nrequire (\n\tfilippo.io/edwards25519 v1.0.0 // indirect\n\tgithub.com/AndreasBriese/bbloom v0.0.0-20190825152654-46b345b51c96 // indirect\n\tgithub.com/BurntSushi/toml v1.2.1 // indirect\n\tgithub.com/Masterminds/goutils v1.1.1 // indirect\n\tgithub.com/Masterminds/semver/v3 v3.2.0 // indirect\n\tgithub.com/Masterminds/sprig/v3 v3.2.3 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.0 // indirect\n\tgithub.com/alecthomas/chroma/v2 v2.5.0 // indirect\n\tgithub.com/antlr/antlr4/runtime/Go/antlr v1.4.10 // indirect\n\tgithub.com/aryann/difflib v0.0.0-20210328193216-ff5ff6dc229b // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/caddyserver/certmagic v0.17.2 // indirect\n\tgithub.com/cenkalti/backoff/v4 v4.1.2 // indirect\n\tgithub.com/cespare/xxhash v1.1.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.1.2 // indirect\n\tgithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.2 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/dgraph-io/badger v1.6.2 // indirect\n\tgithub.com/dgraph-io/badger/v2 v2.2007.4 // indirect\n\tgithub.com/dgraph-io/ristretto v0.1.0 // indirect\n\tgithub.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13 // indirect\n\tgithub.com/dlclark/regexp2 v1.7.0 // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.3 // indirect\n\tgithub.com/fxamacker/cbor/v2 v2.4.0 // indirect\n\tgithub.com/go-chi/chi v4.1.2+incompatible // indirect\n\tgithub.com/go-kit/kit v0.10.0 // indirect\n\tgithub.com/go-logfmt/logfmt v0.5.1 // indirect\n\tgithub.com/go-logr/logr v1.2.3 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-sql-driver/mysql v1.6.0 // indirect\n\tgithub.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0 // indirect\n\tgithub.com/golang/glog v1.0.0 // indirect\n\tgithub.com/golang/mock v1.6.0 // indirect\n\tgithub.com/golang/protobuf v1.5.2 // indirect\n\tgithub.com/golang/snappy v0.0.4 // indirect\n\tgithub.com/google/cel-go v0.13.0 // indirect\n\tgithub.com/google/pprof v0.0.0-20210407192527-94a9f03dee38 // indirect\n\tgithub.com/google/uuid v1.3.0 // indirect\n\tgithub.com/grpc-ecosystem/grpc-gateway v1.16.0 // indirect\n\tgithub.com/huandu/xstrings v1.3.3 // indirect\n\tgithub.com/imdario/mergo v0.3.12 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.0.1 // indirect\n\tgithub.com/jackc/chunkreader/v2 v2.0.1 // indirect\n\tgithub.com/jackc/pgconn v1.13.0 // indirect\n\tgithub.com/jackc/pgio v1.0.0 // indirect\n\tgithub.com/jackc/pgpassfile v1.0.0 // indirect\n\tgithub.com/jackc/pgproto3/v2 v2.3.1 // indirect\n\tgithub.com/jackc/pgservicefile v0.0.0-20200714003250-2b9c44734f2b // indirect\n\tgithub.com/jackc/pgtype v1.12.0 // indirect\n\tgithub.com/jackc/pgx/v4 v4.17.2 // indirect\n\tgithub.com/klauspost/compress v1.15.15 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.3 // indirect\n\tgithub.com/libdns/libdns v0.2.1 // indirect\n\tgithub.com/manifoldco/promptui v0.9.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.8 // indirect\n\tgithub.com/mattn/go-isatty v0.0.13 // indirect\n\tgithub.com/matttproud/golang_protobuf_extensions v1.0.1 // indirect\n\tgithub.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d // indirect\n\tgithub.com/mholt/acmez v1.1.0 // indirect\n\tgithub.com/micromdm/scep/v2 v2.1.0 // indirect\n\tgithub.com/miekg/dns v1.1.50 // indirect\n\tgithub.com/mitchellh/copystructure v1.2.0 // indirect\n\tgithub.com/mitchellh/go-ps v1.0.0 // indirect\n\tgithub.com/mitchellh/reflectwalk v1.0.2 // indirect\n\tgithub.com/onsi/ginkgo/v2 v2.2.0 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/prometheus/client_golang v1.14.0 // indirect\n\tgithub.com/prometheus/client_model v0.3.0 // indirect\n\tgithub.com/prometheus/common v0.37.0 // indirect\n\tgithub.com/prometheus/procfs v0.8.0 // indirect\n\tgithub.com/quic-go/qpack v0.4.0 // indirect\n\tgithub.com/quic-go/qtls-go1-18 v0.2.0 // indirect\n\tgithub.com/quic-go/qtls-go1-19 v0.2.0 // indirect\n\tgithub.com/quic-go/qtls-go1-20 v0.1.0 // indirect\n\tgithub.com/quic-go/quic-go v0.32.0 // indirect\n\tgithub.com/rs/xid v1.4.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/shopspring/decimal v1.2.0 // indirect\n\tgithub.com/shurcooL/sanitized_anchor_name v1.0.0 // indirect\n\tgithub.com/sirupsen/logrus v1.9.0 // indirect\n\tgithub.com/slackhq/nebula v1.6.1 // indirect\n\tgithub.com/smallstep/certificates v0.23.2 // indirect\n\tgithub.com/smallstep/nosql v0.5.0 // indirect\n\tgithub.com/smallstep/truststore v0.12.1 // indirect\n\tgithub.com/spf13/cast v1.4.1 // indirect\n\tgithub.com/spf13/cobra v1.6.1 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/stoewer/go-strcase v1.2.0 // indirect\n\tgithub.com/tailscale/tscert v0.0.0-20230124224810-c6dc1f4049b2 // indirect\n\tgithub.com/urfave/cli v1.22.12 // indirect\n\tgithub.com/x448/float16 v0.8.4 // indirect\n\tgithub.com/yuin/goldmark v1.5.4 // indirect\n\tgithub.com/yuin/goldmark-highlighting/v2 v2.0.0-20220924101305-151362477c87 // indirect\n\tgo.etcd.io/bbolt v1.3.6 // indirect\n\tgo.mozilla.org/pkcs7 v0.0.0-20210826202110-33d05740a352 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.39.0 // indirect\n\tgo.opentelemetry.io/otel v1.13.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/internal/retry v1.4.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.4.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.4.0 // indirect\n\tgo.opentelemetry.io/otel/metric v0.36.0 // indirect\n\tgo.opentelemetry.io/otel/sdk v1.13.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.13.0 // indirect\n\tgo.opentelemetry.io/proto/otlp v0.12.0 // indirect\n\tgo.step.sm/cli-utils v0.7.5 // indirect\n\tgo.step.sm/crypto v0.23.2 // indirect\n\tgo.step.sm/linkedca v0.19.0 // indirect\n\tgo.uber.org/atomic v1.9.0 // indirect\n\tgo.uber.org/multierr v1.6.0 // indirect\n\tgo.uber.org/zap v1.24.0 // indirect\n\tgolang.org/x/crypto v0.5.0 // indirect\n\tgolang.org/x/exp v0.0.0-20221205204356-47842c84f3db // indirect\n\tgolang.org/x/mod v0.10.0 // indirect\n\tgolang.org/x/net v0.10.0 // indirect\n\tgolang.org/x/sync v0.2.0 // indirect\n\tgolang.org/x/sys v0.8.0 // indirect\n\tgolang.org/x/term v0.8.0 // indirect\n\tgolang.org/x/text v0.9.0 // indirect\n\tgolang.org/x/tools v0.9.3\n\tgoogle.golang.org/genproto v0.0.0-20230202175211-008b39050e57 // indirect\n\tgoogle.golang.org/grpc v1.52.3 // indirect\n\tgoogle.golang.org/protobuf v1.28.1 // indirect\n\tgopkg.in/natefinch/lumberjack.v2 v2.2.1 // indirect\n\tgopkg.in/square/go-jose.v2 v2.6.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\thowett.net/plist v1.0.0 // indirect\n)\n' 
 </msg>
<msg timestamp="20230619 18:54:26.761" level="INFO">PUT Response : url=http://localhost:8080//upload/test.txt 
 status=401, reason=Unauthorized 
 headers={'Server': 'Caddy', 'Www-Authenticate': 'Basic realm="restricted"', 'Date': 'Mon, 19 Jun 2023 18:54:26 GMT', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230619 18:54:26.761" level="INFO">${response} = &lt;Response [401]&gt;</msg>
<status status="PASS" starttime="20230619 18:54:26.759" endtime="20230619 18:54:26.762"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230619 18:54:26.762" level="INFO">&lt;Response [401]&gt;</msg>
<status status="PASS" starttime="20230619 18:54:26.762" endtime="20230619 18:54:26.762"/>
</kw>
<if>
<branch type="IF" condition="${text_expected} == True">
<kw name="Should Match" library="BuiltIn">
<arg>${response.text}</arg>
<arg>File ${file_name} created successfully.\n</arg>
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<status status="NOT RUN" starttime="20230619 18:54:26.762" endtime="20230619 18:54:26.762"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:54:26.762" endtime="20230619 18:54:26.762"/>
</branch>
<status status="PASS" starttime="20230619 18:54:26.762" endtime="20230619 18:54:26.762"/>
</if>
<status status="PASS" starttime="20230619 18:54:26.757" endtime="20230619 18:54:26.762"/>
</kw>
<doc>Unauthenticated uploads should fail</doc>
<status status="PASS" starttime="20230619 18:54:26.757" endtime="20230619 18:54:26.762"/>
</test>
<test id="s1-s4-t3" name="Non PUT should be ignored by module" line="20">
<kw name="Wait Until Caddy Is Ready" library="keywords">
<doc>Return only when Caddy is ready to accept connections</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>30s</arg>
<arg>0.5s</arg>
<arg>GET</arg>
<arg>${BASE_URL}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="GET" library="RequestsLibrary">
<arg>${BASE_URL}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20230619 18:54:26.766" level="INFO">GET Request : url=http://Bob:hiccup@localhost:8080/ 
 path_url=/ 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Basic Qm9iOmhpY2N1cA=='} 
 body=None 
 </msg>
<msg timestamp="20230619 18:54:26.766" level="INFO">GET Response : url=http://Bob:hiccup@localhost:8080/ 
 status=200, reason=OK 
 headers={'Server': 'Caddy', 'Date': 'Mon, 19 Jun 2023 18:54:26 GMT', 'Content-Length': '0'} 
 body=None 
 </msg>
<status status="PASS" starttime="20230619 18:54:26.764" endtime="20230619 18:54:26.766"/>
</kw>
<status status="PASS" starttime="20230619 18:54:26.764" endtime="20230619 18:54:26.766"/>
</kw>
<status status="PASS" starttime="20230619 18:54:26.763" endtime="20230619 18:54:26.767"/>
</kw>
<doc>Non-PUT operations should be ignored by the module
(this is to improve coverage)</doc>
<status status="PASS" starttime="20230619 18:54:26.763" endtime="20230619 18:54:26.767"/>
</test>
<kw name="Suite Teardown With Caddy" library="keywords" type="TEARDOWN">
<doc>Perform a graceful shutdown if Caddy and run the regular suite teardown</doc>
<kw name="Send Signal To Process" library="Process">
<arg>SIGINT</arg>
<arg>handle=caddy</arg>
<arg>group=True</arg>
<doc>Sends the given ``signal`` to the specified process.</doc>
<msg timestamp="20230619 18:54:26.768" level="INFO">Sending signal SIGINT (2).</msg>
<status status="PASS" starttime="20230619 18:54:26.767" endtime="20230619 18:54:26.771"/>
</kw>
<kw name="Wait For Process" library="Process">
<var>${result}</var>
<arg>timeout=10s</arg>
<arg>on_timeout=terminate</arg>
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<msg timestamp="20230619 18:54:26.771" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:26.872" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:26.872" level="INFO">${result} = &lt;result object with rc -2&gt;</msg>
<status status="PASS" starttime="20230619 18:54:26.771" endtime="20230619 18:54:26.872"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result.stderr}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230619 18:54:26.873" level="INFO">{"level":"info","ts":1687200865.237567,"msg":"using provided configuration","config_file":"examples/Caddyfile.basic-auth","config_adapter":""}
{"level":"info","ts":1687200865.2393627,"logger":"admin","msg":"admin endpoint started","address":"localhost:2019","enforce_origin":false,"origins":["//localhost:2019","//[::1]:2019","//127.0.0.1:2019"]}
{"level":"info","ts":1687200865.2398856,"logger":"tls.cache.maintenance","msg":"started background certificate maintenance","cache":"0xc0004213b0"}
{"level":"info","ts":1687200865.2402718,"logger":"http.log","msg":"server running","name":"srv0","protocols":["h1","h2","h3"]}
{"level":"info","ts":1687200865.2405405,"msg":"autosaved config (load with --resume flag)","file":"/w/.config/caddy/autosave.json"}
{"level":"info","ts":1687200865.240555,"msg":"serving initial configuration"}
{"level":"info","ts":1687200865.2407856,"logger":"tls","msg":"cleaning storage unit","description":"FileStorage:/w/.local/share/caddy"}
{"level":"info","ts":1687200865.2408237,"logger":"tls","msg":"finished cleaning storage units"}
{"level":"info","ts":1687200866.767912,"msg":"shutting down","signal":"SIGINT"}
{"level":"warn","ts":1687200866.7679427,"msg":"exiting; byeee!! 👋","signal":"SIGINT"}
{"level":"info","ts":1687200866.7680955,"logger":"tls.cache.maintenance","msg":"stopped background certificate maintenance","cache":"0xc0004213b0"}
{"level":"info","ts":1687200866.7681682,"logger":"admin","msg":"stopped previous server","address":"localhost:2019"}
{"level":"info","ts":1687200866.768176,"msg":"shutdown complete","signal":"SIGINT","exit_code":0}</msg>
<status status="PASS" starttime="20230619 18:54:26.873" endtime="20230619 18:54:26.873"/>
</kw>
<kw name="Suite Teardown" library="keywords">
<doc>Generate coverage report and remove coverage directory</doc>
<kw name="Generate Coverage Report" library="keywords">
<doc>Generate coverage report from generated files</doc>
<kw name="Get Coverage Filename From Suite Source" library="keywords">
<var>${cov_path}</var>
<var>${cov_filename}</var>
<doc>Splits `/w/e2e_tests/004_requests.robot` into path and filename. Constructs a
path to the coverage file in `/w/e2e_tests/results`. Returns the coverage full file
path and the coverage filename separately.</doc>
<kw name="Split Path" library="OperatingSystem">
<var>${path}</var>
<var>${suite_filename}</var>
<arg>${SUITE SOURCE}</arg>
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<msg timestamp="20230619 18:54:26.875" level="INFO">${path} = /w/e2e_tests</msg>
<msg timestamp="20230619 18:54:26.875" level="INFO">${suite_filename} = 004_requests.robot</msg>
<status status="PASS" starttime="20230619 18:54:26.874" endtime="20230619 18:54:26.875"/>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<var>${suite_name}</var>
<var>${ext}</var>
<arg>${suite_filename}</arg>
<doc>Splits the extension from the given path.</doc>
<msg timestamp="20230619 18:54:26.876" level="INFO">${suite_name} = 004_requests</msg>
<msg timestamp="20230619 18:54:26.876" level="INFO">${ext} = robot</msg>
<status status="PASS" starttime="20230619 18:54:26.875" endtime="20230619 18:54:26.876"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${cov_path}</var>
<arg>${OUTPUT DIR}</arg>
<arg>${suite_name}.coverage</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20230619 18:54:26.876" level="INFO">${cov_path} = /w/e2e_tests/results/004_requests.coverage</msg>
<status status="PASS" starttime="20230619 18:54:26.876" endtime="20230619 18:54:26.876"/>
</kw>
<return>
<value>${cov_path}</value>
<value>${suite_name}.coverage</value>
<status status="PASS" starttime="20230619 18:54:26.876" endtime="20230619 18:54:26.876"/>
</return>
<msg timestamp="20230619 18:54:26.877" level="INFO">${cov_path} = /w/e2e_tests/results/004_requests.coverage</msg>
<msg timestamp="20230619 18:54:26.877" level="INFO">${cov_filename} = 004_requests.coverage</msg>
<status status="PASS" starttime="20230619 18:54:26.874" endtime="20230619 18:54:26.877"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${dir_exists}</var>
<arg>Directory Should Exist</arg>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Directory Should Exist" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Fails unless the given path points to an existing directory.</doc>
<msg timestamp="20230619 18:54:26.878" level="INFO" html="true">Directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20230619 18:54:26.877" endtime="20230619 18:54:26.878"/>
</kw>
<msg timestamp="20230619 18:54:26.878" level="INFO">${dir_exists} = True</msg>
<status status="PASS" starttime="20230619 18:54:26.877" endtime="20230619 18:54:26.878"/>
</kw>
<if>
<branch type="IF" condition="${dir_exists}">
<kw name="List Files In Directory" library="OperatingSystem">
<var>${dir_contents}</var>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Wrapper for `List Directory` that returns only files.</doc>
<msg timestamp="20230619 18:54:26.878" level="INFO" html="true">Listing contents of directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<msg timestamp="20230619 18:54:26.879" level="INFO">2 files:
covcounters.6b007adb3d230b7f717346764648bf5a.8297.1687200866768209309
covmeta.6b007adb3d230b7f717346764648bf5a</msg>
<msg timestamp="20230619 18:54:26.879" level="INFO">${dir_contents} = ['covcounters.6b007adb3d230b7f717346764648bf5a.8297.1687200866768209309', 'covmeta.6b007adb3d230b7f717346764648bf5a']</msg>
<status status="PASS" starttime="20230619 18:54:26.878" endtime="20230619 18:54:26.879"/>
</kw>
<status status="PASS" starttime="20230619 18:54:26.878" endtime="20230619 18:54:26.879"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${dir_contents}</var>
<arg>${None}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230619 18:54:26.879" endtime="20230619 18:54:26.879"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:54:26.879" endtime="20230619 18:54:26.879"/>
</branch>
<status status="PASS" starttime="20230619 18:54:26.878" endtime="20230619 18:54:26.879"/>
</if>
<if>
<branch type="IF" condition="${dir_contents}">
<kw name="Convert Coverage Fragments" library="keywords">
<arg>${cov_path}</arg>
<doc>Convert coverage fragments (from a go run/build -cover execution) into
a single file</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>go tool covdata textfmt -i\=${OUTPUT DIR}/go-coverage -o\=${cov_path}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:26.880" level="INFO">Starting process:
go tool covdata textfmt -i=/w/e2e_tests/results/go-coverage -o=/w/e2e_tests/results/004_requests.coverage</msg>
<msg timestamp="20230619 18:54:26.883" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:26.893" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:26.893" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:26.880" endtime="20230619 18:54:26.893"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:26.895" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:26.894" endtime="20230619 18:54:26.895"/>
</kw>
<status status="PASS" starttime="20230619 18:54:26.880" endtime="20230619 18:54:26.895"/>
</kw>
<status status="PASS" starttime="20230619 18:54:26.879" endtime="20230619 18:54:26.895"/>
</branch>
<status status="PASS" starttime="20230619 18:54:26.879" endtime="20230619 18:54:26.895"/>
</if>
<kw name="Expect Successful Execution" library="keywords">
<arg>go tool cover -html\=${cov_path} -o\=${cov_path}.html</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:26.897" level="INFO">Starting process:
go tool cover -html=/w/e2e_tests/results/004_requests.coverage -o=/w/e2e_tests/results/004_requests.coverage.html</msg>
<msg timestamp="20230619 18:54:26.900" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:27.296" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:27.297" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:26.897" endtime="20230619 18:54:27.297"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:54:27.298" endtime="20230619 18:54:27.298"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:54:27.297" endtime="20230619 18:54:27.298"/>
</branch>
<status status="PASS" starttime="20230619 18:54:27.297" endtime="20230619 18:54:27.298"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:27.299" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:27.298" endtime="20230619 18:54:27.299"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:54:27.299" endtime="20230619 18:54:27.300"/>
</return>
<status status="PASS" starttime="20230619 18:54:26.896" endtime="20230619 18:54:27.300"/>
</kw>
<kw name="Expect Successful Execution" library="keywords">
<var>${result}</var>
<arg>go tool cover -func\=${cov_path}</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:27.302" level="INFO">Starting process:
go tool cover -func=/w/e2e_tests/results/004_requests.coverage</msg>
<msg timestamp="20230619 18:54:27.307" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:54:27.673" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:54:27.673" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:27.302" endtime="20230619 18:54:27.673"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:54:27.675" endtime="20230619 18:54:27.675"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:54:27.674" endtime="20230619 18:54:27.675"/>
</branch>
<status status="PASS" starttime="20230619 18:54:27.673" endtime="20230619 18:54:27.675"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:54:27.676" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:54:27.675" endtime="20230619 18:54:27.676"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:54:27.676" endtime="20230619 18:54:27.676"/>
</return>
<msg timestamp="20230619 18:54:27.676" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:27.301" endtime="20230619 18:54:27.676"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${percent}</var>
<arg>${result.stdout}</arg>
<arg>total:.*?([0-9.]+%)$</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20230619 18:54:27.677" level="INFO">${percent} = ['78.3%']</msg>
<status status="PASS" starttime="20230619 18:54:27.676" endtime="20230619 18:54:27.677"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>Code coverage</arg>
<arg>${percent[0]} [${cov_filename}.html|HTML Report] | [${cov_filename}|Coverage file]</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20230619 18:54:27.678" level="INFO">Set suite metadata 'Code coverage' to value '78.3% [004_requests.coverage.html|HTML Report] | [004_requests.coverage|Coverage file]'.</msg>
<status status="PASS" starttime="20230619 18:54:27.677" endtime="20230619 18:54:27.678"/>
</kw>
<status status="PASS" starttime="20230619 18:54:26.874" endtime="20230619 18:54:27.678"/>
</kw>
<kw name="Remove Directory" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<arg>recursive=True</arg>
<doc>Removes the directory pointed to by the given ``path``.</doc>
<msg timestamp="20230619 18:54:27.679" level="INFO" html="true">Removed directory '&lt;a href="file:///w/e2e_tests/results/go-coverage"&gt;/w/e2e_tests/results/go-coverage&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20230619 18:54:27.678" endtime="20230619 18:54:27.679"/>
</kw>
<status status="PASS" starttime="20230619 18:54:26.873" endtime="20230619 18:54:27.679"/>
</kw>
<status status="PASS" starttime="20230619 18:54:26.767" endtime="20230619 18:54:27.680"/>
</kw>
<doc>Executes test cases for handling file uploads
and processing non-PUT operations.</doc>
<meta name="Code coverage">78.3% [004_requests.coverage.html|HTML Report] | [004_requests.coverage|Coverage file]</meta>
<status status="PASS" starttime="20230619 18:54:23.024" endtime="20230619 18:54:27.680"/>
</suite>
<suite id="s1-s5" name="005 Binaries" source="/w/e2e_tests/005_binaries.robot">
<test id="s1-s5-t1" name="Build distribution binaries" line="9">
<kw name="Expect Successful Execution" library="keywords">
<arg>make dist-all</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:54:27.688" level="INFO">Starting process:
make dist-all</msg>
<msg timestamp="20230619 18:54:27.690" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:57:12.489" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:57:12.490" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:54:27.687" endtime="20230619 18:57:12.490"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:57:12.492" endtime="20230619 18:57:12.492"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:57:12.490" endtime="20230619 18:57:12.492"/>
</branch>
<status status="PASS" starttime="20230619 18:57:12.490" endtime="20230619 18:57:12.492"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:57:12.493" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:57:12.492" endtime="20230619 18:57:12.493"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:57:12.493" endtime="20230619 18:57:12.493"/>
</return>
<status status="PASS" starttime="20230619 18:54:27.687" endtime="20230619 18:57:12.493"/>
</kw>
<doc>Builds the distribution binaries using the
'make dist-all' command.</doc>
<status status="PASS" starttime="20230619 18:54:27.686" endtime="20230619 18:57:12.493"/>
</test>
<test id="s1-s5-t2" name="Built binaries should run" line="15">
<kw name="List Files In Directory" library="OperatingSystem">
<var>${binary_list}</var>
<arg>./dist/</arg>
<doc>Wrapper for `List Directory` that returns only files.</doc>
<msg timestamp="20230619 18:57:12.494" level="INFO" html="true">Listing contents of directory '&lt;a href="file:///w/dist"&gt;/w/dist&lt;/a&gt;'.</msg>
<msg timestamp="20230619 18:57:12.495" level="INFO">2 files:
caddy-put-linux-x86_64
caddy-put-security-linux-x86_64</msg>
<msg timestamp="20230619 18:57:12.495" level="INFO">${binary_list} = ['caddy-put-linux-x86_64', 'caddy-put-security-linux-x86_64']</msg>
<status status="PASS" starttime="20230619 18:57:12.494" endtime="20230619 18:57:12.495"/>
</kw>
<for flavor="IN">
<var>${binary}</var>
<value>@{binary_list}</value>
<iter>
<var name="${binary}">caddy-put-linux-x86_64</var>
<kw name="Expect Successful Execution" library="keywords">
<arg>./dist/${binary} list-modules</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:57:12.498" level="INFO">Starting process:
./dist/caddy-put-linux-x86_64 list-modules</msg>
<msg timestamp="20230619 18:57:12.501" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:57:12.536" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:57:12.536" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:57:12.497" endtime="20230619 18:57:12.536"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:57:12.538" endtime="20230619 18:57:12.538"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:57:12.537" endtime="20230619 18:57:12.538"/>
</branch>
<status status="PASS" starttime="20230619 18:57:12.537" endtime="20230619 18:57:12.538"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:57:12.540" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:57:12.538" endtime="20230619 18:57:12.540"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:57:12.540" endtime="20230619 18:57:12.540"/>
</return>
<status status="PASS" starttime="20230619 18:57:12.497" endtime="20230619 18:57:12.541"/>
</kw>
<status status="PASS" starttime="20230619 18:57:12.495" endtime="20230619 18:57:12.541"/>
</iter>
<iter>
<var name="${binary}">caddy-put-security-linux-x86_64</var>
<kw name="Expect Successful Execution" library="keywords">
<arg>./dist/${binary} list-modules</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:57:12.544" level="INFO">Starting process:
./dist/caddy-put-security-linux-x86_64 list-modules</msg>
<msg timestamp="20230619 18:57:12.547" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:57:12.630" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:57:12.630" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:57:12.543" endtime="20230619 18:57:12.630"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:57:12.632" endtime="20230619 18:57:12.632"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:57:12.630" endtime="20230619 18:57:12.632"/>
</branch>
<status status="PASS" starttime="20230619 18:57:12.630" endtime="20230619 18:57:12.632"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:57:12.633" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:57:12.632" endtime="20230619 18:57:12.633"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:57:12.633" endtime="20230619 18:57:12.633"/>
</return>
<status status="PASS" starttime="20230619 18:57:12.543" endtime="20230619 18:57:12.633"/>
</kw>
<status status="PASS" starttime="20230619 18:57:12.541" endtime="20230619 18:57:12.634"/>
</iter>
<status status="PASS" starttime="20230619 18:57:12.495" endtime="20230619 18:57:12.634"/>
</for>
<doc>Verifies that all the built binaries in the 'dist/'
subdirectory execute successfully.</doc>
<status status="PASS" starttime="20230619 18:57:12.494" endtime="20230619 18:57:12.634"/>
</test>
<doc>Verifies the build process of distribution binaries and
ensures that the built binaries execute successfully.</doc>
<status status="PASS" starttime="20230619 18:54:27.681" endtime="20230619 18:57:12.634"/>
</suite>
<suite id="s1-s6" name="006 Summary" source="/w/e2e_tests/006_summary.robot">
<test id="s1-s6-t1" name="Collate code coverage reports" line="11">
<kw name="Get Coverage Filename From Suite Source" library="keywords">
<var>${cov_path}</var>
<var>${cov_filename}</var>
<doc>Splits `/w/e2e_tests/006_summary.robot` into path and filename. Constructs a
path to the coverage file in `/w/e2e_tests/results`. Returns the coverage full file
path and the coverage filename separately.</doc>
<kw name="Split Path" library="OperatingSystem">
<var>${path}</var>
<var>${suite_filename}</var>
<arg>${SUITE SOURCE}</arg>
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<msg timestamp="20230619 18:57:12.643" level="INFO">${path} = /w/e2e_tests</msg>
<msg timestamp="20230619 18:57:12.643" level="INFO">${suite_filename} = 006_summary.robot</msg>
<status status="PASS" starttime="20230619 18:57:12.642" endtime="20230619 18:57:12.643"/>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<var>${suite_name}</var>
<var>${ext}</var>
<arg>${suite_filename}</arg>
<doc>Splits the extension from the given path.</doc>
<msg timestamp="20230619 18:57:12.643" level="INFO">${suite_name} = 006_summary</msg>
<msg timestamp="20230619 18:57:12.643" level="INFO">${ext} = robot</msg>
<status status="PASS" starttime="20230619 18:57:12.643" endtime="20230619 18:57:12.643"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${cov_path}</var>
<arg>${OUTPUT DIR}</arg>
<arg>${suite_name}.coverage</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20230619 18:57:12.644" level="INFO">${cov_path} = /w/e2e_tests/results/006_summary.coverage</msg>
<status status="PASS" starttime="20230619 18:57:12.643" endtime="20230619 18:57:12.644"/>
</kw>
<return>
<value>${cov_path}</value>
<value>${suite_name}.coverage</value>
<status status="PASS" starttime="20230619 18:57:12.644" endtime="20230619 18:57:12.644"/>
</return>
<msg timestamp="20230619 18:57:12.644" level="INFO">${cov_path} = /w/e2e_tests/results/006_summary.coverage</msg>
<msg timestamp="20230619 18:57:12.644" level="INFO">${cov_filename} = 006_summary.coverage</msg>
<status status="PASS" starttime="20230619 18:57:12.642" endtime="20230619 18:57:12.644"/>
</kw>
<kw name="Expect Successful Execution" library="keywords">
<arg>go run cmd/gocovmerge/gocovmerge.go ${OUTPUT DIR}/*.coverage &gt; ${cov_path}</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:57:12.646" level="INFO">Starting process:
go run cmd/gocovmerge/gocovmerge.go /w/e2e_tests/results/*.coverage &gt; /w/e2e_tests/results/006_summary.coverage</msg>
<msg timestamp="20230619 18:57:12.649" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:57:12.857" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:57:12.857" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:57:12.646" endtime="20230619 18:57:12.857"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:57:12.859" endtime="20230619 18:57:12.859"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:57:12.858" endtime="20230619 18:57:12.859"/>
</branch>
<status status="PASS" starttime="20230619 18:57:12.858" endtime="20230619 18:57:12.859"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:57:12.860" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:57:12.859" endtime="20230619 18:57:12.860"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:57:12.860" endtime="20230619 18:57:12.861"/>
</return>
<status status="PASS" starttime="20230619 18:57:12.645" endtime="20230619 18:57:12.861"/>
</kw>
<kw name="Generate Coverage Report" library="keywords">
<doc>Generate coverage report from generated files</doc>
<kw name="Get Coverage Filename From Suite Source" library="keywords">
<var>${cov_path}</var>
<var>${cov_filename}</var>
<doc>Splits `/w/e2e_tests/006_summary.robot` into path and filename. Constructs a
path to the coverage file in `/w/e2e_tests/results`. Returns the coverage full file
path and the coverage filename separately.</doc>
<kw name="Split Path" library="OperatingSystem">
<var>${path}</var>
<var>${suite_filename}</var>
<arg>${SUITE SOURCE}</arg>
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<msg timestamp="20230619 18:57:12.862" level="INFO">${path} = /w/e2e_tests</msg>
<msg timestamp="20230619 18:57:12.862" level="INFO">${suite_filename} = 006_summary.robot</msg>
<status status="PASS" starttime="20230619 18:57:12.862" endtime="20230619 18:57:12.862"/>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<var>${suite_name}</var>
<var>${ext}</var>
<arg>${suite_filename}</arg>
<doc>Splits the extension from the given path.</doc>
<msg timestamp="20230619 18:57:12.863" level="INFO">${suite_name} = 006_summary</msg>
<msg timestamp="20230619 18:57:12.863" level="INFO">${ext} = robot</msg>
<status status="PASS" starttime="20230619 18:57:12.862" endtime="20230619 18:57:12.863"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${cov_path}</var>
<arg>${OUTPUT DIR}</arg>
<arg>${suite_name}.coverage</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20230619 18:57:12.864" level="INFO">${cov_path} = /w/e2e_tests/results/006_summary.coverage</msg>
<status status="PASS" starttime="20230619 18:57:12.863" endtime="20230619 18:57:12.864"/>
</kw>
<return>
<value>${cov_path}</value>
<value>${suite_name}.coverage</value>
<status status="PASS" starttime="20230619 18:57:12.864" endtime="20230619 18:57:12.864"/>
</return>
<msg timestamp="20230619 18:57:12.864" level="INFO">${cov_path} = /w/e2e_tests/results/006_summary.coverage</msg>
<msg timestamp="20230619 18:57:12.865" level="INFO">${cov_filename} = 006_summary.coverage</msg>
<status status="PASS" starttime="20230619 18:57:12.861" endtime="20230619 18:57:12.865"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${dir_exists}</var>
<arg>Directory Should Exist</arg>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Directory Should Exist" library="OperatingSystem">
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Fails unless the given path points to an existing directory.</doc>
<msg timestamp="20230619 18:57:12.865" level="FAIL">Directory '/w/e2e_tests/results/go-coverage' does not exist.</msg>
<status status="FAIL" starttime="20230619 18:57:12.865" endtime="20230619 18:57:12.866"/>
</kw>
<msg timestamp="20230619 18:57:12.866" level="INFO">${dir_exists} = False</msg>
<status status="PASS" starttime="20230619 18:57:12.865" endtime="20230619 18:57:12.866"/>
</kw>
<if>
<branch type="IF" condition="${dir_exists}">
<kw name="List Files In Directory" library="OperatingSystem">
<var>${dir_contents}</var>
<arg>${OUTPUT DIR}/go-coverage</arg>
<doc>Wrapper for `List Directory` that returns only files.</doc>
<status status="NOT RUN" starttime="20230619 18:57:12.866" endtime="20230619 18:57:12.866"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:57:12.866" endtime="20230619 18:57:12.866"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${dir_contents}</var>
<arg>${None}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230619 18:57:12.866" level="INFO">${dir_contents} = None</msg>
<status status="PASS" starttime="20230619 18:57:12.866" endtime="20230619 18:57:12.866"/>
</kw>
<status status="PASS" starttime="20230619 18:57:12.866" endtime="20230619 18:57:12.866"/>
</branch>
<status status="PASS" starttime="20230619 18:57:12.866" endtime="20230619 18:57:12.866"/>
</if>
<if>
<branch type="IF" condition="${dir_contents}">
<kw name="Convert Coverage Fragments" library="keywords">
<arg>${cov_path}</arg>
<doc>Convert coverage fragments (from a go run/build -cover execution) into
a single file</doc>
<status status="NOT RUN" starttime="20230619 18:57:12.867" endtime="20230619 18:57:12.867"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:57:12.867" endtime="20230619 18:57:12.867"/>
</branch>
<status status="PASS" starttime="20230619 18:57:12.867" endtime="20230619 18:57:12.867"/>
</if>
<kw name="Expect Successful Execution" library="keywords">
<arg>go tool cover -html\=${cov_path} -o\=${cov_path}.html</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:57:12.869" level="INFO">Starting process:
go tool cover -html=/w/e2e_tests/results/006_summary.coverage -o=/w/e2e_tests/results/006_summary.coverage.html</msg>
<msg timestamp="20230619 18:57:12.872" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:57:13.341" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:57:13.342" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:57:12.869" endtime="20230619 18:57:13.342"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:57:13.344" endtime="20230619 18:57:13.344"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:57:13.342" endtime="20230619 18:57:13.344"/>
</branch>
<status status="PASS" starttime="20230619 18:57:13.342" endtime="20230619 18:57:13.344"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:57:13.345" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:57:13.344" endtime="20230619 18:57:13.345"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:57:13.345" endtime="20230619 18:57:13.345"/>
</return>
<status status="PASS" starttime="20230619 18:57:12.868" endtime="20230619 18:57:13.345"/>
</kw>
<kw name="Expect Successful Execution" library="keywords">
<var>${result}</var>
<arg>go tool cover -func\=${cov_path}</arg>
<doc>Runs a ${command} and expects it to succeed. ${command}
should be a string representing the shell command.</doc>
<kw name="Run Process" library="Process">
<var>${result}</var>
<arg>${command}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20230619 18:57:13.347" level="INFO">Starting process:
go tool cover -func=/w/e2e_tests/results/006_summary.coverage</msg>
<msg timestamp="20230619 18:57:13.351" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20230619 18:57:13.749" level="INFO">Process completed.</msg>
<msg timestamp="20230619 18:57:13.749" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:57:13.347" endtime="20230619 18:57:13.749"/>
</kw>
<if>
<branch type="IF" condition="${result.rc} != 0">
<kw name="Log Many" library="BuiltIn">
<arg>${result.stderr}</arg>
<arg>${result.stdout}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<status status="NOT RUN" starttime="20230619 18:57:13.751" endtime="20230619 18:57:13.751"/>
</kw>
<status status="NOT RUN" starttime="20230619 18:57:13.750" endtime="20230619 18:57:13.751"/>
</branch>
<status status="PASS" starttime="20230619 18:57:13.750" endtime="20230619 18:57:13.751"/>
</if>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${result.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230619 18:57:13.752" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230619 18:57:13.751" endtime="20230619 18:57:13.752"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20230619 18:57:13.752" endtime="20230619 18:57:13.752"/>
</return>
<msg timestamp="20230619 18:57:13.752" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20230619 18:57:13.346" endtime="20230619 18:57:13.752"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${percent}</var>
<arg>${result.stdout}</arg>
<arg>total:.*?([0-9.]+%)$</arg>
<arg>1</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20230619 18:57:13.753" level="INFO">${percent} = ['82.6%']</msg>
<status status="PASS" starttime="20230619 18:57:13.753" endtime="20230619 18:57:13.753"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>Code coverage</arg>
<arg>${percent[0]} [${cov_filename}.html|HTML Report] | [${cov_filename}|Coverage file]</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20230619 18:57:13.755" level="INFO">Set suite metadata 'Code coverage' to value '82.6% [006_summary.coverage.html|HTML Report] | [006_summary.coverage|Coverage file]'.</msg>
<status status="PASS" starttime="20230619 18:57:13.753" endtime="20230619 18:57:13.755"/>
</kw>
<status status="PASS" starttime="20230619 18:57:12.861" endtime="20230619 18:57:13.755"/>
</kw>
<doc>Combine all code coverage profiles into one.</doc>
<status status="PASS" starttime="20230619 18:57:12.641" endtime="20230619 18:57:13.755"/>
</test>
<doc>Aggregate multiple code coverage reports into a single report.
It leverages the gocovmerge utility, a Go tool that merges multiple
coverage profiles. The suite utilizes keywords defined in the
resources/keywords.robot file.</doc>
<meta name="Code coverage">82.6% [006_summary.coverage.html|HTML Report] | [006_summary.coverage|Coverage file]</meta>
<status status="PASS" starttime="20230619 18:57:12.636" endtime="20230619 18:57:13.756"/>
</suite>
<status status="FAIL" starttime="20230619 18:52:23.273" endtime="20230619 18:57:13.757"/>
</suite>
<statistics>
<total>
<stat pass="14" fail="1" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="14" fail="1" skip="0" id="s1" name="E2E Tests">E2E Tests</stat>
<stat pass="2" fail="1" skip="0" id="s1-s1" name="001 Source Code">E2E Tests.001 Source Code</stat>
<stat pass="2" fail="0" skip="0" id="s1-s2" name="002 Unit Tests">E2E Tests.002 Unit Tests</stat>
<stat pass="4" fail="0" skip="0" id="s1-s3" name="003 Configuration">E2E Tests.003 Configuration</stat>
<stat pass="3" fail="0" skip="0" id="s1-s4" name="004 Requests">E2E Tests.004 Requests</stat>
<stat pass="2" fail="0" skip="0" id="s1-s5" name="005 Binaries">E2E Tests.005 Binaries</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="006 Summary">E2E Tests.006 Summary</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
